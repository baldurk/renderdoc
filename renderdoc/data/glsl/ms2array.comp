/******************************************************************************
 * The MIT License (MIT)
 *
 * Copyright (c) 2020-2021 Baldur Karlsson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

#if defined(OPENGL_CORE)
#extension GL_ARB_compute_shader : require

// safe to assume this extension in compute shaders as it pre-dates compute shaders
#extension GL_ARB_shading_language_420pack : require
#endif

#include "glsl_globals.h"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform PRECISION usampler2DMSArray srcMS;
// binding = 1 used as stencil read in the depth-stencil copy fragment shaders

#ifdef VULKAN

layout(binding = 2) writeonly uniform PRECISION uimage2DArray dstArray;

layout(push_constant) uniform multisamplePush
{
  int numMultiSamples;
  int baseSlice;
  int baseSample;
}
mscopy;

#define numMultiSamples (mscopy.numMultiSamples)
#define baseSlice (mscopy.baseSlice)
#define baseSample (mscopy.baseSample)

#else

layout(rgba32ui, binding = 2) writeonly uniform PRECISION uimage2DArray dstArray;

uniform ivec4 mscopy;

#define numMultiSamples (mscopy.x)
#define baseSlice (mscopy.y)
#define baseSample (mscopy.z)

#endif

void main()
{
  ivec3 id = ivec3(gl_GlobalInvocationID);
  int slice = baseSlice + int(id.z / numMultiSamples);
  int sampleIdx = baseSample + int(id.z % numMultiSamples);

  uvec4 data = texelFetch(srcMS, ivec3(int(id.x), int(id.y), slice), sampleIdx);

  imageStore(dstArray, ivec3(int(id.x), int(id.y), int(id.z)), data);
}
