#!/usr/bin/env python
import xml.etree.ElementTree as ET

def get_string(element):
    if element == None:
        return ""
    return "".join(element.itertext())

if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print("err arg")
        sys.exit(1)

    with open(sys.argv[1], "r") as f:
        data = f.read()

    header = [
        "/* Generated by executing: $ {program} {input_file} */".format(program=sys.argv[0], input_file=sys.argv[1]),
        "",
        "#ifndef EGL_FUNC_TYPEDEFS_H",
        "#define EGL_FUNC_TYPEDEFS_H",
        "",
        "#include \"egl.h\"",
        "#include \"eglext.h\"",
        "",
        "#ifdef __cplusplus",
        "extern \"C\" {",
        "#endif",
        ""
    ]

    footer = [
        "",
        "#ifdef __cplusplus",
        "}",
        "#endif",
        "",
        "#endif /* EGL_FUNC_TYPEDEFS_H */",
    ]
    tdmap = {}
    print("\n".join(header))
    root = ET.fromstring(data)

    for item in root.findall("commands/command"):
        proto = item.find('proto')
        base = (proto.text or "")
        spec_type = get_string(proto.find('ptype'))
        return_type = base + spec_type
        method_name = proto.find('name').text

        params = []
        for param in item.findall('param'):
            params.append(get_string(param))

        tdmap[method_name] = "typedef {0} (*PFN_{1})({2});".format(return_type, method_name, ", ".join(["{0}".format(param) for param in params]))

    for item in root.findall("feature"):
        print ("#ifdef " + item.get('name'))
        for require in item.findall("require"):
            commands = [];
            for cmd in require:
                if (cmd.tag == 'command') :
                    commands.append(tdmap[cmd.get('name')])
            if (len(commands) != 0) :
              comment = require.get('comment')
              if (comment):
                print ("#ifdef " + comment)
              for tdef in commands:
                print (tdef)
              if (comment):
                print ("#endif")
        print ("#endif\n")
    print("\n".join(footer))
