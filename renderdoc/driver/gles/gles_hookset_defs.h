/******************************************************************************
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2016 Baldur Karlsson
 * Copyright (c) 2016 University of Szeged
 * Copyright (c) 2016 Samsung Electronics Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/


#pragma once

// This file is autogenerated with hookset.pl - any changes will be overwritten
// next time that script is run.
// $ pwd
// .../renderdoc/driver/gles
// $ ./gles_hookset.pl > gles_hookset_defs.h
////////////////////////////////////////////////////

// dllexport functions
#define DLLExportHooks() \
    HookInit(glActiveTexture); \
    HookInit(glAttachShader); \
    HookInit(glBindAttribLocation); \
    HookInit(glBindBuffer); \
    HookInit(glBindFramebuffer); \
    HookInit(glBindRenderbuffer); \
    HookInit(glBindTexture); \
    HookInit(glBlendColor); \
    HookInit(glBlendEquation); \
    HookInit(glBlendEquationSeparate); \
    HookInit(glBlendFunc); \
    HookInit(glBlendFuncSeparate); \
    HookInit(glBufferData); \
    HookInit(glBufferSubData); \
    HookInit(glCheckFramebufferStatus); \
    HookInit(glClear); \
    HookInit(glClearColor); \
    HookInit(glClearDepthf); \
    HookInit(glClearStencil); \
    HookInit(glColorMask); \
    HookInit(glCompileShader); \
    HookInit(glCompressedTexImage2D); \
    HookInit(glCompressedTexSubImage2D); \
    HookInit(glCopyTexImage2D); \
    HookInit(glCopyTexSubImage2D); \
    HookInit(glCreateProgram); \
    HookInit(glCreateShader); \
    HookInit(glCullFace); \
    HookInit(glDeleteBuffers); \
    HookInit(glDeleteFramebuffers); \
    HookInit(glDeleteProgram); \
    HookInit(glDeleteRenderbuffers); \
    HookInit(glDeleteShader); \
    HookInit(glDeleteTextures); \
    HookInit(glDepthFunc); \
    HookInit(glDepthMask); \
    HookInit(glDepthRangef); \
    HookInit(glDetachShader); \
    HookInit(glDisable); \
    HookInit(glDisableVertexAttribArray); \
    HookInit(glDrawArrays); \
    HookInit(glDrawElements); \
    HookInit(glEnable); \
    HookInit(glEnableVertexAttribArray); \
    HookInit(glFinish); \
    HookInit(glFlush); \
    HookInit(glFramebufferRenderbuffer); \
    HookInit(glFramebufferTexture2D); \
    HookInit(glFrontFace); \
    HookInit(glGenBuffers); \
    HookInit(glGenerateMipmap); \
    HookInit(glGenFramebuffers); \
    HookInit(glGenRenderbuffers); \
    HookInit(glGenTextures); \
    HookInit(glGetActiveAttrib); \
    HookInit(glGetActiveUniform); \
    HookInit(glGetAttachedShaders); \
    HookInit(glGetAttribLocation); \
    HookInit(glGetBooleanv); \
    HookInit(glGetBufferParameteriv); \
    HookInit(glGetError); \
    HookInit(glGetFloatv); \
    HookInit(glGetFramebufferAttachmentParameteriv); \
    HookInit(glGetIntegerv); \
    HookInit(glGetProgramiv); \
    HookInit(glGetProgramInfoLog); \
    HookInit(glGetRenderbufferParameteriv); \
    HookInit(glGetShaderiv); \
    HookInit(glGetShaderInfoLog); \
    HookInit(glGetShaderPrecisionFormat); \
    HookInit(glGetShaderSource); \
    HookInit(glGetString); \
    HookInit(glGetTexParameterfv); \
    HookInit(glGetTexParameteriv); \
    HookInit(glGetUniformfv); \
    HookInit(glGetUniformiv); \
    HookInit(glGetUniformLocation); \
    HookInit(glGetVertexAttribfv); \
    HookInit(glGetVertexAttribiv); \
    HookInit(glGetVertexAttribPointerv); \
    HookInit(glHint); \
    HookInit(glIsBuffer); \
    HookInit(glIsEnabled); \
    HookInit(glIsFramebuffer); \
    HookInit(glIsProgram); \
    HookInit(glIsRenderbuffer); \
    HookInit(glIsShader); \
    HookInit(glIsTexture); \
    HookInit(glLineWidth); \
    HookInit(glLinkProgram); \
    HookInit(glPixelStorei); \
    HookInit(glPolygonOffset); \
    HookInit(glReadPixels); \
    HookInit(glReleaseShaderCompiler); \
    HookInit(glRenderbufferStorage); \
    HookInit(glSampleCoverage); \
    HookInit(glScissor); \
    HookInit(glShaderBinary); \
    HookInit(glShaderSource); \
    HookInit(glStencilFunc); \
    HookInit(glStencilFuncSeparate); \
    HookInit(glStencilMask); \
    HookInit(glStencilMaskSeparate); \
    HookInit(glStencilOp); \
    HookInit(glStencilOpSeparate); \
    HookInit(glTexImage2D); \
    HookInit(glTexParameterf); \
    HookInit(glTexParameterfv); \
    HookInit(glTexParameteri); \
    HookInit(glTexParameteriv); \
    HookInit(glTexSubImage2D); \
    HookInit(glUniform1f); \
    HookInit(glUniform1fv); \
    HookInit(glUniform1i); \
    HookInit(glUniform1iv); \
    HookInit(glUniform2f); \
    HookInit(glUniform2fv); \
    HookInit(glUniform2i); \
    HookInit(glUniform2iv); \
    HookInit(glUniform3f); \
    HookInit(glUniform3fv); \
    HookInit(glUniform3i); \
    HookInit(glUniform3iv); \
    HookInit(glUniform4f); \
    HookInit(glUniform4fv); \
    HookInit(glUniform4i); \
    HookInit(glUniform4iv); \
    HookInit(glUniformMatrix2fv); \
    HookInit(glUniformMatrix3fv); \
    HookInit(glUniformMatrix4fv); \
    HookInit(glUseProgram); \
    HookInit(glValidateProgram); \
    HookInit(glVertexAttrib1f); \
    HookInit(glVertexAttrib1fv); \
    HookInit(glVertexAttrib2f); \
    HookInit(glVertexAttrib2fv); \
    HookInit(glVertexAttrib3f); \
    HookInit(glVertexAttrib3fv); \
    HookInit(glVertexAttrib4f); \
    HookInit(glVertexAttrib4fv); \
    HookInit(glVertexAttribPointer); \
    HookInit(glViewport); \
    HookInit(glReadBuffer); \
    HookInit(glDrawRangeElements); \
    HookInit(glTexImage3D); \
    HookInit(glTexSubImage3D); \
    HookInit(glCopyTexSubImage3D); \
    HookInit(glCompressedTexImage3D); \
    HookInit(glCompressedTexSubImage3D); \
    HookInit(glGenQueries); \
    HookInit(glDeleteQueries); \
    HookInit(glIsQuery); \
    HookInit(glBeginQuery); \
    HookInit(glEndQuery); \
    HookInit(glGetQueryiv); \
    HookInit(glGetQueryObjectuiv); \
    HookInit(glUnmapBuffer); \
    HookInit(glGetBufferPointerv); \
    HookInit(glDrawBuffers); \
    HookInit(glUniformMatrix2x3fv); \
    HookInit(glUniformMatrix3x2fv); \
    HookInit(glUniformMatrix2x4fv); \
    HookInit(glUniformMatrix4x2fv); \
    HookInit(glUniformMatrix3x4fv); \
    HookInit(glUniformMatrix4x3fv); \
    HookInit(glBlitFramebuffer); \
    HookInit(glRenderbufferStorageMultisample); \
    HookInit(glFramebufferTextureLayer); \
    HookInit(glMapBufferRange); \
    HookInit(glFlushMappedBufferRange); \
    HookInit(glBindVertexArray); \
    HookInit(glDeleteVertexArrays); \
    HookInit(glGenVertexArrays); \
    HookInit(glIsVertexArray); \
    HookInit(glGetIntegeri_v); \
    HookInit(glBeginTransformFeedback); \
    HookInit(glEndTransformFeedback); \
    HookInit(glBindBufferRange); \
    HookInit(glBindBufferBase); \
    HookInit(glTransformFeedbackVaryings); \
    HookInit(glGetTransformFeedbackVarying); \
    HookInit(glVertexAttribIPointer); \
    HookInit(glGetVertexAttribIiv); \
    HookInit(glGetVertexAttribIuiv); \
    HookInit(glVertexAttribI4i); \
    HookInit(glVertexAttribI4ui); \
    HookInit(glVertexAttribI4iv); \
    HookInit(glVertexAttribI4uiv); \
    HookInit(glGetUniformuiv); \
    HookInit(glGetFragDataLocation); \
    HookInit(glUniform1ui); \
    HookInit(glUniform2ui); \
    HookInit(glUniform3ui); \
    HookInit(glUniform4ui); \
    HookInit(glUniform1uiv); \
    HookInit(glUniform2uiv); \
    HookInit(glUniform3uiv); \
    HookInit(glUniform4uiv); \
    HookInit(glClearBufferiv); \
    HookInit(glClearBufferuiv); \
    HookInit(glClearBufferfv); \
    HookInit(glClearBufferfi); \
    HookInit(glGetStringi); \
    HookInit(glCopyBufferSubData); \
    HookInit(glGetUniformIndices); \
    HookInit(glGetActiveUniformsiv); \
    HookInit(glGetUniformBlockIndex); \
    HookInit(glGetActiveUniformBlockiv); \
    HookInit(glGetActiveUniformBlockName); \
    HookInit(glUniformBlockBinding); \
    HookInit(glDrawArraysInstanced); \
    HookInit(glDrawElementsInstanced); \
    HookInit(glFenceSync); \
    HookInit(glIsSync); \
    HookInit(glDeleteSync); \
    HookInit(glClientWaitSync); \
    HookInit(glWaitSync); \
    HookInit(glGetInteger64v); \
    HookInit(glGetSynciv); \
    HookInit(glGetInteger64i_v); \
    HookInit(glGetBufferParameteri64v); \
    HookInit(glGenSamplers); \
    HookInit(glDeleteSamplers); \
    HookInit(glIsSampler); \
    HookInit(glBindSampler); \
    HookInit(glSamplerParameteri); \
    HookInit(glSamplerParameteriv); \
    HookInit(glSamplerParameterf); \
    HookInit(glSamplerParameterfv); \
    HookInit(glGetSamplerParameteriv); \
    HookInit(glGetSamplerParameterfv); \
    HookInit(glVertexAttribDivisor); \
    HookInit(glBindTransformFeedback); \
    HookInit(glDeleteTransformFeedbacks); \
    HookInit(glGenTransformFeedbacks); \
    HookInit(glIsTransformFeedback); \
    HookInit(glPauseTransformFeedback); \
    HookInit(glResumeTransformFeedback); \
    HookInit(glGetProgramBinary); \
    HookInit(glProgramBinary); \
    HookInit(glProgramParameteri); \
    HookInit(glInvalidateFramebuffer); \
    HookInit(glInvalidateSubFramebuffer); \
    HookInit(glTexStorage2D); \
    HookInit(glTexStorage3D); \
    HookInit(glGetInternalformativ); \
    HookInit(glDispatchCompute); \
    HookInit(glDispatchComputeIndirect); \
    HookInit(glDrawArraysIndirect); \
    HookInit(glDrawElementsIndirect); \
    HookInit(glFramebufferParameteri); \
    HookInit(glGetFramebufferParameteriv); \
    HookInit(glGetProgramInterfaceiv); \
    HookInit(glGetProgramResourceIndex); \
    HookInit(glGetProgramResourceName); \
    HookInit(glGetProgramResourceiv); \
    HookInit(glGetProgramResourceLocation); \
    HookInit(glUseProgramStages); \
    HookInit(glActiveShaderProgram); \
    HookInit(glCreateShaderProgramv); \
    HookInit(glBindProgramPipeline); \
    HookInit(glDeleteProgramPipelines); \
    HookInit(glGenProgramPipelines); \
    HookInit(glIsProgramPipeline); \
    HookInit(glGetProgramPipelineiv); \
    HookInit(glProgramUniform1i); \
    HookInit(glProgramUniform2i); \
    HookInit(glProgramUniform3i); \
    HookInit(glProgramUniform4i); \
    HookInit(glProgramUniform1ui); \
    HookInit(glProgramUniform2ui); \
    HookInit(glProgramUniform3ui); \
    HookInit(glProgramUniform4ui); \
    HookInit(glProgramUniform1f); \
    HookInit(glProgramUniform2f); \
    HookInit(glProgramUniform3f); \
    HookInit(glProgramUniform4f); \
    HookInit(glProgramUniform1iv); \
    HookInit(glProgramUniform2iv); \
    HookInit(glProgramUniform3iv); \
    HookInit(glProgramUniform4iv); \
    HookInit(glProgramUniform1uiv); \
    HookInit(glProgramUniform2uiv); \
    HookInit(glProgramUniform3uiv); \
    HookInit(glProgramUniform4uiv); \
    HookInit(glProgramUniform1fv); \
    HookInit(glProgramUniform2fv); \
    HookInit(glProgramUniform3fv); \
    HookInit(glProgramUniform4fv); \
    HookInit(glProgramUniformMatrix2fv); \
    HookInit(glProgramUniformMatrix3fv); \
    HookInit(glProgramUniformMatrix4fv); \
    HookInit(glProgramUniformMatrix2x3fv); \
    HookInit(glProgramUniformMatrix3x2fv); \
    HookInit(glProgramUniformMatrix2x4fv); \
    HookInit(glProgramUniformMatrix4x2fv); \
    HookInit(glProgramUniformMatrix3x4fv); \
    HookInit(glProgramUniformMatrix4x3fv); \
    HookInit(glValidateProgramPipeline); \
    HookInit(glGetProgramPipelineInfoLog); \
    HookInit(glBindImageTexture); \
    HookInit(glGetBooleani_v); \
    HookInit(glMemoryBarrier); \
    HookInit(glMemoryBarrierByRegion); \
    HookInit(glTexStorage2DMultisample); \
    HookInit(glGetMultisamplefv); \
    HookInit(glSampleMaski); \
    HookInit(glGetTexLevelParameteriv); \
    HookInit(glGetTexLevelParameterfv); \
    HookInit(glBindVertexBuffer); \
    HookInit(glVertexAttribFormat); \
    HookInit(glVertexAttribIFormat); \
    HookInit(glVertexAttribBinding); \
    HookInit(glVertexBindingDivisor); \
    HookInit(glBlendBarrier); \
    HookInit(glCopyImageSubData); \
    HookInit(glDebugMessageControl); \
    HookInit(glDebugMessageInsert); \
    HookInit(glDebugMessageCallback); \
    HookInit(glGetDebugMessageLog); \
    HookInit(glPushDebugGroup); \
    HookInit(glPopDebugGroup); \
    HookInit(glObjectLabel); \
    HookInit(glGetObjectLabel); \
    HookInit(glObjectPtrLabel); \
    HookInit(glGetObjectPtrLabel); \
    HookInit(glGetPointerv); \
    HookInit(glEnablei); \
    HookInit(glDisablei); \
    HookInit(glBlendEquationi); \
    HookInit(glBlendEquationSeparatei); \
    HookInit(glBlendFunci); \
    HookInit(glBlendFuncSeparatei); \
    HookInit(glColorMaski); \
    HookInit(glIsEnabledi); \
    HookInit(glDrawElementsBaseVertex); \
    HookInit(glDrawRangeElementsBaseVertex); \
    HookInit(glDrawElementsInstancedBaseVertex); \
    HookInit(glFramebufferTexture); \
    HookInit(glPrimitiveBoundingBox); \
    HookInit(glGetGraphicsResetStatus); \
    HookInit(glReadnPixels); \
    HookInit(glGetnUniformfv); \
    HookInit(glGetnUniformiv); \
    HookInit(glGetnUniformuiv); \
    HookInit(glMinSampleShading); \
    HookInit(glPatchParameteri); \
    HookInit(glTexParameterIiv); \
    HookInit(glTexParameterIuiv); \
    HookInit(glGetTexParameterIiv); \
    HookInit(glGetTexParameterIuiv); \
    HookInit(glSamplerParameterIiv); \
    HookInit(glSamplerParameterIuiv); \
    HookInit(glGetSamplerParameterIiv); \
    HookInit(glGetSamplerParameterIuiv); \
    HookInit(glTexBuffer); \
    HookInit(glTexBufferRange); \
    HookInit(glTexStorage3DMultisample); \



// gl extensions
#define HookCheckGLExtensions() \
    HookExtension(PFNGLMAPBUFFEROESPROC, glMapBufferOES); \
    HookExtension(PFNGLFRAMEBUFFERTEXTURE3DOESPROC, glFramebufferTexture3DOES); \
    HookExtension(PFNGLVIEWPORTARRAYVOESPROC, glViewportArrayvOES); \
    HookExtension(PFNGLVIEWPORTINDEXEDFOESPROC, glViewportIndexedfOES); \
    HookExtension(PFNGLVIEWPORTINDEXEDFVOESPROC, glViewportIndexedfvOES); \
    HookExtension(PFNGLSCISSORARRAYVOESPROC, glScissorArrayvOES); \
    HookExtension(PFNGLSCISSORINDEXEDOESPROC, glScissorIndexedOES); \
    HookExtension(PFNGLSCISSORINDEXEDVOESPROC, glScissorIndexedvOES); \
    HookExtension(PFNGLDEPTHRANGEARRAYFVOESPROC, glDepthRangeArrayfvOES); \
    HookExtension(PFNGLDEPTHRANGEINDEXEDFOESPROC, glDepthRangeIndexedfOES); \
    HookExtension(PFNGLGETFLOATI_VOESPROC, glGetFloati_vOES); \
    HookExtension(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC, glDrawArraysInstancedBaseInstanceEXT); \
    HookExtension(PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC, glDrawElementsInstancedBaseInstanceEXT); \
    HookExtension(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC, glDrawElementsInstancedBaseVertexBaseInstanceEXT); \
    HookExtension(PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC, glBindFragDataLocationIndexedEXT); \
    HookExtension(PFNGLBINDFRAGDATALOCATIONEXTPROC, glBindFragDataLocationEXT); \
    HookExtension(PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC, glGetProgramResourceLocationIndexEXT); \
    HookExtension(PFNGLGETFRAGDATAINDEXEXTPROC, glGetFragDataIndexEXT); \
    HookExtension(PFNGLBUFFERSTORAGEEXTPROC, glBufferStorageEXT); \
    HookExtension(PFNGLLABELOBJECTEXTPROC, glLabelObjectEXT); \
    HookExtension(PFNGLINSERTEVENTMARKEREXTPROC, glInsertEventMarkerEXT); \
    HookExtension(PFNGLPUSHGROUPMARKEREXTPROC, glPushGroupMarkerEXT); \
    HookExtension(PFNGLPOPGROUPMARKEREXTPROC, glPopGroupMarkerEXT); \
    HookExtension(PFNGLQUERYCOUNTEREXTPROC, glQueryCounterEXT); \
    HookExtension(PFNGLGETQUERYOBJECTIVEXTPROC, glGetQueryObjectivEXT); \
    HookExtension(PFNGLGETQUERYOBJECTI64VEXTPROC, glGetQueryObjecti64vEXT); \
    HookExtension(PFNGLGETQUERYOBJECTUI64VEXTPROC, glGetQueryObjectui64vEXT); \
    HookExtension(PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC, glFramebufferTexture2DMultisampleEXT); \
    HookExtension(PFNGLPOLYGONOFFSETCLAMPEXTPROC, glPolygonOffsetClampEXT); \
    HookExtension(PFNGLRASTERSAMPLESEXTPROC, glRasterSamplesEXT); \
    HookExtension(PFNGLTEXSTORAGE1DEXTPROC, glTexStorage1DEXT); \
    HookExtension(PFNGLTEXTURESTORAGE1DEXTPROC, glTextureStorage1DEXT); \
    HookExtension(PFNGLTEXTURESTORAGE2DEXTPROC, glTextureStorage2DEXT); \
    HookExtension(PFNGLTEXTURESTORAGE3DEXTPROC, glTextureStorage3DEXT); \
    HookExtension(PFNGLTEXTUREVIEWEXTPROC, glTextureViewEXT); \
    HookExtension(PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC, glFramebufferTexture2DMultisampleIMG); \
    HookExtension(PFNGLBEGINCONDITIONALRENDERNVPROC, glBeginConditionalRenderNV); \
    HookExtension(PFNGLENDCONDITIONALRENDERNVPROC, glEndConditionalRenderNV); \
    HookExtension(PFNGLPOLYGONMODENVPROC, glPolygonModeNV); \
    HookExtension(PFNGLVIEWPORTARRAYVNVPROC, glViewportArrayvNV); \
    HookExtension(PFNGLVIEWPORTINDEXEDFNVPROC, glViewportIndexedfNV); \
    HookExtension(PFNGLVIEWPORTINDEXEDFVNVPROC, glViewportIndexedfvNV); \
    HookExtension(PFNGLSCISSORARRAYVNVPROC, glScissorArrayvNV); \
    HookExtension(PFNGLSCISSORINDEXEDNVPROC, glScissorIndexedNV); \
    HookExtension(PFNGLSCISSORINDEXEDVNVPROC, glScissorIndexedvNV); \
    HookExtension(PFNGLDEPTHRANGEARRAYFVNVPROC, glDepthRangeArrayfvNV); \
    HookExtension(PFNGLDEPTHRANGEINDEXEDFNVPROC, glDepthRangeIndexedfNV); \
    HookExtension(PFNGLGETFLOATI_VNVPROC, glGetFloati_vNV); \
    HookExtensionAlias(PFNGLREADBUFFERPROC, glReadBuffer, glReadBufferNV); \
    HookExtensionAlias(PFNGLTEXIMAGE3DPROC, glTexImage3D, glTexImage3DOES); \
    HookExtensionAlias(PFNGLTEXSUBIMAGE3DPROC, glTexSubImage3D, glTexSubImage3DOES); \
    HookExtensionAlias(PFNGLCOPYTEXSUBIMAGE3DPROC, glCopyTexSubImage3D, glCopyTexSubImage3DOES); \
    HookExtensionAlias(PFNGLCOMPRESSEDTEXIMAGE3DPROC, glCompressedTexImage3D, glCompressedTexImage3DOES); \
    HookExtensionAlias(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC, glCompressedTexSubImage3D, glCompressedTexSubImage3DOES); \
    HookExtensionAlias(PFNGLGENQUERIESPROC, glGenQueries, glGenQueriesEXT); \
    HookExtensionAlias(PFNGLDELETEQUERIESPROC, glDeleteQueries, glDeleteQueriesEXT); \
    HookExtensionAlias(PFNGLISQUERYPROC, glIsQuery, glIsQueryEXT); \
    HookExtensionAlias(PFNGLBEGINQUERYPROC, glBeginQuery, glBeginQueryEXT); \
    HookExtensionAlias(PFNGLENDQUERYPROC, glEndQuery, glEndQueryEXT); \
    HookExtensionAlias(PFNGLGETQUERYIVPROC, glGetQueryiv, glGetQueryivEXT); \
    HookExtensionAlias(PFNGLGETQUERYOBJECTUIVPROC, glGetQueryObjectuiv, glGetQueryObjectuivEXT); \
    HookExtensionAlias(PFNGLUNMAPBUFFERPROC, glUnmapBuffer, glUnmapBufferOES); \
    HookExtensionAlias(PFNGLGETBUFFERPOINTERVPROC, glGetBufferPointerv, glGetBufferPointervOES); \
    HookExtensionAlias(PFNGLDRAWBUFFERSPROC, glDrawBuffers, glDrawBuffersEXT); \
    HookExtensionAlias(PFNGLDRAWBUFFERSPROC, glDrawBuffers, glDrawBuffersNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX2X3FVPROC, glUniformMatrix2x3fv, glUniformMatrix2x3fvNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX3X2FVPROC, glUniformMatrix3x2fv, glUniformMatrix3x2fvNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX2X4FVPROC, glUniformMatrix2x4fv, glUniformMatrix2x4fvNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX4X2FVPROC, glUniformMatrix4x2fv, glUniformMatrix4x2fvNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX3X4FVPROC, glUniformMatrix3x4fv, glUniformMatrix3x4fvNV); \
    HookExtensionAlias(PFNGLUNIFORMMATRIX4X3FVPROC, glUniformMatrix4x3fv, glUniformMatrix4x3fvNV); \
    HookExtensionAlias(PFNGLBLITFRAMEBUFFERPROC, glBlitFramebuffer, glBlitFramebufferANGLE); \
    HookExtensionAlias(PFNGLBLITFRAMEBUFFERPROC, glBlitFramebuffer, glBlitFramebufferNV); \
    HookExtensionAlias(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC, glRenderbufferStorageMultisample, glRenderbufferStorageMultisampleANGLE); \
    HookExtensionAlias(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC, glRenderbufferStorageMultisample, glRenderbufferStorageMultisampleAPPLE); \
    HookExtensionAlias(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC, glRenderbufferStorageMultisample, glRenderbufferStorageMultisampleEXT); \
    HookExtensionAlias(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC, glRenderbufferStorageMultisample, glRenderbufferStorageMultisampleIMG); \
    HookExtensionAlias(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC, glRenderbufferStorageMultisample, glRenderbufferStorageMultisampleNV); \
    HookExtensionAlias(PFNGLMAPBUFFERRANGEPROC, glMapBufferRange, glMapBufferRangeEXT); \
    HookExtensionAlias(PFNGLFLUSHMAPPEDBUFFERRANGEPROC, glFlushMappedBufferRange, glFlushMappedBufferRangeEXT); \
    HookExtensionAlias(PFNGLBINDVERTEXARRAYPROC, glBindVertexArray, glBindVertexArrayOES); \
    HookExtensionAlias(PFNGLDELETEVERTEXARRAYSPROC, glDeleteVertexArrays, glDeleteVertexArraysOES); \
    HookExtensionAlias(PFNGLGENVERTEXARRAYSPROC, glGenVertexArrays, glGenVertexArraysOES); \
    HookExtensionAlias(PFNGLISVERTEXARRAYPROC, glIsVertexArray, glIsVertexArrayOES); \
    HookExtensionAlias(PFNGLGETINTEGERI_VPROC, glGetIntegeri_v, glGetIntegeri_vEXT); \
    HookExtensionAlias(PFNGLCOPYBUFFERSUBDATAPROC, glCopyBufferSubData, glCopyBufferSubDataNV); \
    HookExtensionAlias(PFNGLDRAWARRAYSINSTANCEDPROC, glDrawArraysInstanced, glDrawArraysInstancedANGLE); \
    HookExtensionAlias(PFNGLDRAWARRAYSINSTANCEDPROC, glDrawArraysInstanced, glDrawArraysInstancedEXT); \
    HookExtensionAlias(PFNGLDRAWARRAYSINSTANCEDPROC, glDrawArraysInstanced, glDrawArraysInstancedNV); \
    HookExtensionAlias(PFNGLDRAWELEMENTSINSTANCEDPROC, glDrawElementsInstanced, glDrawElementsInstancedANGLE); \
    HookExtensionAlias(PFNGLDRAWELEMENTSINSTANCEDPROC, glDrawElementsInstanced, glDrawElementsInstancedEXT); \
    HookExtensionAlias(PFNGLDRAWELEMENTSINSTANCEDPROC, glDrawElementsInstanced, glDrawElementsInstancedNV); \
    HookExtensionAlias(PFNGLFENCESYNCPROC, glFenceSync, glFenceSyncAPPLE); \
    HookExtensionAlias(PFNGLISSYNCPROC, glIsSync, glIsSyncAPPLE); \
    HookExtensionAlias(PFNGLDELETESYNCPROC, glDeleteSync, glDeleteSyncAPPLE); \
    HookExtensionAlias(PFNGLCLIENTWAITSYNCPROC, glClientWaitSync, glClientWaitSyncAPPLE); \
    HookExtensionAlias(PFNGLWAITSYNCPROC, glWaitSync, glWaitSyncAPPLE); \
    HookExtensionAlias(PFNGLGETINTEGER64VPROC, glGetInteger64v, glGetInteger64vAPPLE); \
    HookExtensionAlias(PFNGLGETSYNCIVPROC, glGetSynciv, glGetSyncivAPPLE); \
    HookExtensionAlias(PFNGLVERTEXATTRIBDIVISORPROC, glVertexAttribDivisor, glVertexAttribDivisorANGLE); \
    HookExtensionAlias(PFNGLVERTEXATTRIBDIVISORPROC, glVertexAttribDivisor, glVertexAttribDivisorEXT); \
    HookExtensionAlias(PFNGLVERTEXATTRIBDIVISORPROC, glVertexAttribDivisor, glVertexAttribDivisorNV); \
    HookExtensionAlias(PFNGLGETPROGRAMBINARYPROC, glGetProgramBinary, glGetProgramBinaryOES); \
    HookExtensionAlias(PFNGLPROGRAMBINARYPROC, glProgramBinary, glProgramBinaryOES); \
    HookExtensionAlias(PFNGLPROGRAMPARAMETERIPROC, glProgramParameteri, glProgramParameteriEXT); \
    HookExtensionAlias(PFNGLTEXSTORAGE2DPROC, glTexStorage2D, glTexStorage2DEXT); \
    HookExtensionAlias(PFNGLTEXSTORAGE3DPROC, glTexStorage3D, glTexStorage3DEXT); \
    HookExtensionAlias(PFNGLUSEPROGRAMSTAGESPROC, glUseProgramStages, glUseProgramStagesEXT); \
    HookExtensionAlias(PFNGLACTIVESHADERPROGRAMPROC, glActiveShaderProgram, glActiveShaderProgramEXT); \
    HookExtensionAlias(PFNGLCREATESHADERPROGRAMVPROC, glCreateShaderProgramv, glCreateShaderProgramvEXT); \
    HookExtensionAlias(PFNGLBINDPROGRAMPIPELINEPROC, glBindProgramPipeline, glBindProgramPipelineEXT); \
    HookExtensionAlias(PFNGLDELETEPROGRAMPIPELINESPROC, glDeleteProgramPipelines, glDeleteProgramPipelinesEXT); \
    HookExtensionAlias(PFNGLGENPROGRAMPIPELINESPROC, glGenProgramPipelines, glGenProgramPipelinesEXT); \
    HookExtensionAlias(PFNGLISPROGRAMPIPELINEPROC, glIsProgramPipeline, glIsProgramPipelineEXT); \
    HookExtensionAlias(PFNGLGETPROGRAMPIPELINEIVPROC, glGetProgramPipelineiv, glGetProgramPipelineivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1IPROC, glProgramUniform1i, glProgramUniform1iEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2IPROC, glProgramUniform2i, glProgramUniform2iEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3IPROC, glProgramUniform3i, glProgramUniform3iEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4IPROC, glProgramUniform4i, glProgramUniform4iEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1UIPROC, glProgramUniform1ui, glProgramUniform1uiEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2UIPROC, glProgramUniform2ui, glProgramUniform2uiEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3UIPROC, glProgramUniform3ui, glProgramUniform3uiEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4UIPROC, glProgramUniform4ui, glProgramUniform4uiEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1FPROC, glProgramUniform1f, glProgramUniform1fEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2FPROC, glProgramUniform2f, glProgramUniform2fEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3FPROC, glProgramUniform3f, glProgramUniform3fEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4FPROC, glProgramUniform4f, glProgramUniform4fEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1IVPROC, glProgramUniform1iv, glProgramUniform1ivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2IVPROC, glProgramUniform2iv, glProgramUniform2ivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3IVPROC, glProgramUniform3iv, glProgramUniform3ivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4IVPROC, glProgramUniform4iv, glProgramUniform4ivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1UIVPROC, glProgramUniform1uiv, glProgramUniform1uivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2UIVPROC, glProgramUniform2uiv, glProgramUniform2uivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3UIVPROC, glProgramUniform3uiv, glProgramUniform3uivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4UIVPROC, glProgramUniform4uiv, glProgramUniform4uivEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM1FVPROC, glProgramUniform1fv, glProgramUniform1fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM2FVPROC, glProgramUniform2fv, glProgramUniform2fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM3FVPROC, glProgramUniform3fv, glProgramUniform3fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORM4FVPROC, glProgramUniform4fv, glProgramUniform4fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX2FVPROC, glProgramUniformMatrix2fv, glProgramUniformMatrix2fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX3FVPROC, glProgramUniformMatrix3fv, glProgramUniformMatrix3fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX4FVPROC, glProgramUniformMatrix4fv, glProgramUniformMatrix4fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC, glProgramUniformMatrix2x3fv, glProgramUniformMatrix2x3fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC, glProgramUniformMatrix3x2fv, glProgramUniformMatrix3x2fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC, glProgramUniformMatrix2x4fv, glProgramUniformMatrix2x4fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC, glProgramUniformMatrix4x2fv, glProgramUniformMatrix4x2fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC, glProgramUniformMatrix3x4fv, glProgramUniformMatrix3x4fvEXT); \
    HookExtensionAlias(PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC, glProgramUniformMatrix4x3fv, glProgramUniformMatrix4x3fvEXT); \
    HookExtensionAlias(PFNGLVALIDATEPROGRAMPIPELINEPROC, glValidateProgramPipeline, glValidateProgramPipelineEXT); \
    HookExtensionAlias(PFNGLGETPROGRAMPIPELINEINFOLOGPROC, glGetProgramPipelineInfoLog, glGetProgramPipelineInfoLogEXT); \
    HookExtensionAlias(PFNGLBLENDBARRIERPROC, glBlendBarrier, glBlendBarrierKHR); \
    HookExtensionAlias(PFNGLBLENDBARRIERPROC, glBlendBarrier, glBlendBarrierNV); \
    HookExtensionAlias(PFNGLCOPYIMAGESUBDATAPROC, glCopyImageSubData, glCopyImageSubDataEXT); \
    HookExtensionAlias(PFNGLCOPYIMAGESUBDATAPROC, glCopyImageSubData, glCopyImageSubDataOES); \
    HookExtensionAlias(PFNGLDEBUGMESSAGECONTROLPROC, glDebugMessageControl, glDebugMessageControlKHR); \
    HookExtensionAlias(PFNGLDEBUGMESSAGEINSERTPROC, glDebugMessageInsert, glDebugMessageInsertKHR); \
    HookExtensionAlias(PFNGLDEBUGMESSAGECALLBACKPROC, glDebugMessageCallback, glDebugMessageCallbackKHR); \
    HookExtensionAlias(PFNGLGETDEBUGMESSAGELOGPROC, glGetDebugMessageLog, glGetDebugMessageLogKHR); \
    HookExtensionAlias(PFNGLPUSHDEBUGGROUPPROC, glPushDebugGroup, glPushDebugGroupKHR); \
    HookExtensionAlias(PFNGLPOPDEBUGGROUPPROC, glPopDebugGroup, glPopDebugGroupKHR); \
    HookExtensionAlias(PFNGLOBJECTLABELPROC, glObjectLabel, glObjectLabelKHR); \
    HookExtensionAlias(PFNGLGETOBJECTLABELPROC, glGetObjectLabel, glGetObjectLabelEXT); \
    HookExtensionAlias(PFNGLGETOBJECTLABELPROC, glGetObjectLabel, glGetObjectLabelKHR); \
    HookExtensionAlias(PFNGLOBJECTPTRLABELPROC, glObjectPtrLabel, glObjectPtrLabelKHR); \
    HookExtensionAlias(PFNGLGETOBJECTPTRLABELPROC, glGetObjectPtrLabel, glGetObjectPtrLabelKHR); \
    HookExtensionAlias(PFNGLGETPOINTERVPROC, glGetPointerv, glGetPointervKHR); \
    HookExtensionAlias(PFNGLENABLEIPROC, glEnablei, glEnableiEXT); \
    HookExtensionAlias(PFNGLENABLEIPROC, glEnablei, glEnableiNV); \
    HookExtensionAlias(PFNGLENABLEIPROC, glEnablei, glEnableiOES); \
    HookExtensionAlias(PFNGLDISABLEIPROC, glDisablei, glDisableiEXT); \
    HookExtensionAlias(PFNGLDISABLEIPROC, glDisablei, glDisableiNV); \
    HookExtensionAlias(PFNGLDISABLEIPROC, glDisablei, glDisableiOES); \
    HookExtensionAlias(PFNGLBLENDEQUATIONIPROC, glBlendEquationi, glBlendEquationiEXT); \
    HookExtensionAlias(PFNGLBLENDEQUATIONIPROC, glBlendEquationi, glBlendEquationiOES); \
    HookExtensionAlias(PFNGLBLENDEQUATIONSEPARATEIPROC, glBlendEquationSeparatei, glBlendEquationSeparateiEXT); \
    HookExtensionAlias(PFNGLBLENDEQUATIONSEPARATEIPROC, glBlendEquationSeparatei, glBlendEquationSeparateiOES); \
    HookExtensionAlias(PFNGLBLENDFUNCIPROC, glBlendFunci, glBlendFunciEXT); \
    HookExtensionAlias(PFNGLBLENDFUNCIPROC, glBlendFunci, glBlendFunciOES); \
    HookExtensionAlias(PFNGLBLENDFUNCSEPARATEIPROC, glBlendFuncSeparatei, glBlendFuncSeparateiEXT); \
    HookExtensionAlias(PFNGLBLENDFUNCSEPARATEIPROC, glBlendFuncSeparatei, glBlendFuncSeparateiOES); \
    HookExtensionAlias(PFNGLCOLORMASKIPROC, glColorMaski, glColorMaskiEXT); \
    HookExtensionAlias(PFNGLCOLORMASKIPROC, glColorMaski, glColorMaskiOES); \
    HookExtensionAlias(PFNGLISENABLEDIPROC, glIsEnabledi, glIsEnablediEXT); \
    HookExtensionAlias(PFNGLISENABLEDIPROC, glIsEnabledi, glIsEnablediNV); \
    HookExtensionAlias(PFNGLISENABLEDIPROC, glIsEnabledi, glIsEnablediOES); \
    HookExtensionAlias(PFNGLDRAWELEMENTSBASEVERTEXPROC, glDrawElementsBaseVertex, glDrawElementsBaseVertexEXT); \
    HookExtensionAlias(PFNGLDRAWELEMENTSBASEVERTEXPROC, glDrawElementsBaseVertex, glDrawElementsBaseVertexOES); \
    HookExtensionAlias(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC, glDrawRangeElementsBaseVertex, glDrawRangeElementsBaseVertexEXT); \
    HookExtensionAlias(PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC, glDrawRangeElementsBaseVertex, glDrawRangeElementsBaseVertexOES); \
    HookExtensionAlias(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC, glDrawElementsInstancedBaseVertex, glDrawElementsInstancedBaseVertexEXT); \
    HookExtensionAlias(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC, glDrawElementsInstancedBaseVertex, glDrawElementsInstancedBaseVertexOES); \
    HookExtensionAlias(PFNGLFRAMEBUFFERTEXTUREPROC, glFramebufferTexture, glFramebufferTextureEXT); \
    HookExtensionAlias(PFNGLFRAMEBUFFERTEXTUREPROC, glFramebufferTexture, glFramebufferTextureOES); \
    HookExtensionAlias(PFNGLPRIMITIVEBOUNDINGBOXPROC, glPrimitiveBoundingBox, glPrimitiveBoundingBoxEXT); \
    HookExtensionAlias(PFNGLPRIMITIVEBOUNDINGBOXPROC, glPrimitiveBoundingBox, glPrimitiveBoundingBoxOES); \
    HookExtensionAlias(PFNGLGETGRAPHICSRESETSTATUSPROC, glGetGraphicsResetStatus, glGetGraphicsResetStatusEXT); \
    HookExtensionAlias(PFNGLGETGRAPHICSRESETSTATUSPROC, glGetGraphicsResetStatus, glGetGraphicsResetStatusKHR); \
    HookExtensionAlias(PFNGLREADNPIXELSPROC, glReadnPixels, glReadnPixelsEXT); \
    HookExtensionAlias(PFNGLREADNPIXELSPROC, glReadnPixels, glReadnPixelsKHR); \
    HookExtensionAlias(PFNGLGETNUNIFORMFVPROC, glGetnUniformfv, glGetnUniformfvEXT); \
    HookExtensionAlias(PFNGLGETNUNIFORMFVPROC, glGetnUniformfv, glGetnUniformfvKHR); \
    HookExtensionAlias(PFNGLGETNUNIFORMIVPROC, glGetnUniformiv, glGetnUniformivEXT); \
    HookExtensionAlias(PFNGLGETNUNIFORMIVPROC, glGetnUniformiv, glGetnUniformivKHR); \
    HookExtensionAlias(PFNGLGETNUNIFORMUIVPROC, glGetnUniformuiv, glGetnUniformuivKHR); \
    HookExtensionAlias(PFNGLMINSAMPLESHADINGPROC, glMinSampleShading, glMinSampleShadingOES); \
    HookExtensionAlias(PFNGLPATCHPARAMETERIPROC, glPatchParameteri, glPatchParameteriEXT); \
    HookExtensionAlias(PFNGLPATCHPARAMETERIPROC, glPatchParameteri, glPatchParameteriOES); \
    HookExtensionAlias(PFNGLTEXPARAMETERIIVPROC, glTexParameterIiv, glTexParameterIivEXT); \
    HookExtensionAlias(PFNGLTEXPARAMETERIIVPROC, glTexParameterIiv, glTexParameterIivOES); \
    HookExtensionAlias(PFNGLTEXPARAMETERIUIVPROC, glTexParameterIuiv, glTexParameterIuivEXT); \
    HookExtensionAlias(PFNGLTEXPARAMETERIUIVPROC, glTexParameterIuiv, glTexParameterIuivOES); \
    HookExtensionAlias(PFNGLGETTEXPARAMETERIIVPROC, glGetTexParameterIiv, glGetTexParameterIivEXT); \
    HookExtensionAlias(PFNGLGETTEXPARAMETERIIVPROC, glGetTexParameterIiv, glGetTexParameterIivOES); \
    HookExtensionAlias(PFNGLGETTEXPARAMETERIUIVPROC, glGetTexParameterIuiv, glGetTexParameterIuivEXT); \
    HookExtensionAlias(PFNGLGETTEXPARAMETERIUIVPROC, glGetTexParameterIuiv, glGetTexParameterIuivOES); \
    HookExtensionAlias(PFNGLSAMPLERPARAMETERIIVPROC, glSamplerParameterIiv, glSamplerParameterIivEXT); \
    HookExtensionAlias(PFNGLSAMPLERPARAMETERIIVPROC, glSamplerParameterIiv, glSamplerParameterIivOES); \
    HookExtensionAlias(PFNGLSAMPLERPARAMETERIUIVPROC, glSamplerParameterIuiv, glSamplerParameterIuivEXT); \
    HookExtensionAlias(PFNGLSAMPLERPARAMETERIUIVPROC, glSamplerParameterIuiv, glSamplerParameterIuivOES); \
    HookExtensionAlias(PFNGLGETSAMPLERPARAMETERIIVPROC, glGetSamplerParameterIiv, glGetSamplerParameterIivEXT); \
    HookExtensionAlias(PFNGLGETSAMPLERPARAMETERIIVPROC, glGetSamplerParameterIiv, glGetSamplerParameterIivOES); \
    HookExtensionAlias(PFNGLGETSAMPLERPARAMETERIUIVPROC, glGetSamplerParameterIuiv, glGetSamplerParameterIuivEXT); \
    HookExtensionAlias(PFNGLGETSAMPLERPARAMETERIUIVPROC, glGetSamplerParameterIuiv, glGetSamplerParameterIuivOES); \
    HookExtensionAlias(PFNGLTEXBUFFERPROC, glTexBuffer, glTexBufferEXT); \
    HookExtensionAlias(PFNGLTEXBUFFERPROC, glTexBuffer, glTexBufferOES); \
    HookExtensionAlias(PFNGLTEXBUFFERRANGEPROC, glTexBufferRange, glTexBufferRangeEXT); \
    HookExtensionAlias(PFNGLTEXBUFFERRANGEPROC, glTexBufferRange, glTexBufferRangeOES); \
    HookExtensionAlias(PFNGLTEXSTORAGE3DMULTISAMPLEPROC, glTexStorage3DMultisample, glTexStorage3DMultisampleOES); \



// dllexport functions
#define DefineDLLExportHooks() \
    HookWrapper1(void, glActiveTexture, GLenum, texture); \
    HookWrapper2(void, glAttachShader, GLuint, program, GLuint, shader); \
    HookWrapper3(void, glBindAttribLocation, GLuint, program, GLuint, index, const GLchar *, name); \
    HookWrapper2(void, glBindBuffer, GLenum, target, GLuint, buffer); \
    HookWrapper2(void, glBindFramebuffer, GLenum, target, GLuint, framebuffer); \
    HookWrapper2(void, glBindRenderbuffer, GLenum, target, GLuint, renderbuffer); \
    HookWrapper2(void, glBindTexture, GLenum, target, GLuint, texture); \
    HookWrapper4(void, glBlendColor, GLfloat, red, GLfloat, green, GLfloat, blue, GLfloat, alpha); \
    HookWrapper1(void, glBlendEquation, GLenum, mode); \
    HookWrapper2(void, glBlendEquationSeparate, GLenum, modeRGB, GLenum, modeAlpha); \
    HookWrapper2(void, glBlendFunc, GLenum, sfactor, GLenum, dfactor); \
    HookWrapper4(void, glBlendFuncSeparate, GLenum, sfactorRGB, GLenum, dfactorRGB, GLenum, sfactorAlpha, GLenum, dfactorAlpha); \
    HookWrapper4(void, glBufferData, GLenum, target, GLsizeiptr, size, const void *, data, GLenum, usage); \
    HookWrapper4(void, glBufferSubData, GLenum, target, GLintptr, offset, GLsizeiptr, size, const void *, data); \
    HookWrapper1(GLenum, glCheckFramebufferStatus, GLenum, target); \
    HookWrapper1(void, glClear, GLbitfield, mask); \
    HookWrapper4(void, glClearColor, GLfloat, red, GLfloat, green, GLfloat, blue, GLfloat, alpha); \
    HookWrapper1(void, glClearDepthf, GLfloat, d); \
    HookWrapper1(void, glClearStencil, GLint, s); \
    HookWrapper4(void, glColorMask, GLboolean, red, GLboolean, green, GLboolean, blue, GLboolean, alpha); \
    HookWrapper1(void, glCompileShader, GLuint, shader); \
    HookWrapper8(void, glCompressedTexImage2D, GLenum, target, GLint, level, GLenum, internalformat, GLsizei, width, GLsizei, height, GLint, border, GLsizei, imageSize, const void *, data); \
    HookWrapper9(void, glCompressedTexSubImage2D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLsizei, width, GLsizei, height, GLenum, format, GLsizei, imageSize, const void *, data); \
    HookWrapper8(void, glCopyTexImage2D, GLenum, target, GLint, level, GLenum, internalformat, GLint, x, GLint, y, GLsizei, width, GLsizei, height, GLint, border); \
    HookWrapper8(void, glCopyTexSubImage2D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, x, GLint, y, GLsizei, width, GLsizei, height); \
    HookWrapper0(GLuint, glCreateProgram); \
    HookWrapper1(GLuint, glCreateShader, GLenum, type); \
    HookWrapper1(void, glCullFace, GLenum, mode); \
    HookWrapper2(void, glDeleteBuffers, GLsizei, n, const GLuint *, buffers); \
    HookWrapper2(void, glDeleteFramebuffers, GLsizei, n, const GLuint *, framebuffers); \
    HookWrapper1(void, glDeleteProgram, GLuint, program); \
    HookWrapper2(void, glDeleteRenderbuffers, GLsizei, n, const GLuint *, renderbuffers); \
    HookWrapper1(void, glDeleteShader, GLuint, shader); \
    HookWrapper2(void, glDeleteTextures, GLsizei, n, const GLuint *, textures); \
    HookWrapper1(void, glDepthFunc, GLenum, func); \
    HookWrapper1(void, glDepthMask, GLboolean, flag); \
    HookWrapper2(void, glDepthRangef, GLfloat, n, GLfloat, f); \
    HookWrapper2(void, glDetachShader, GLuint, program, GLuint, shader); \
    HookWrapper1(void, glDisable, GLenum, cap); \
    HookWrapper1(void, glDisableVertexAttribArray, GLuint, index); \
    HookWrapper3(void, glDrawArrays, GLenum, mode, GLint, first, GLsizei, count); \
    HookWrapper4(void, glDrawElements, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices); \
    HookWrapper1(void, glEnable, GLenum, cap); \
    HookWrapper1(void, glEnableVertexAttribArray, GLuint, index); \
    HookWrapper0(void, glFinish); \
    HookWrapper0(void, glFlush); \
    HookWrapper4(void, glFramebufferRenderbuffer, GLenum, target, GLenum, attachment, GLenum, renderbuffertarget, GLuint, renderbuffer); \
    HookWrapper5(void, glFramebufferTexture2D, GLenum, target, GLenum, attachment, GLenum, textarget, GLuint, texture, GLint, level); \
    HookWrapper1(void, glFrontFace, GLenum, mode); \
    HookWrapper2(void, glGenBuffers, GLsizei, n, GLuint *, buffers); \
    HookWrapper1(void, glGenerateMipmap, GLenum, target); \
    HookWrapper2(void, glGenFramebuffers, GLsizei, n, GLuint *, framebuffers); \
    HookWrapper2(void, glGenRenderbuffers, GLsizei, n, GLuint *, renderbuffers); \
    HookWrapper2(void, glGenTextures, GLsizei, n, GLuint *, textures); \
    HookWrapper7(void, glGetActiveAttrib, GLuint, program, GLuint, index, GLsizei, bufSize, GLsizei *, length, GLint *, size, GLenum *, type, GLchar *, name); \
    HookWrapper7(void, glGetActiveUniform, GLuint, program, GLuint, index, GLsizei, bufSize, GLsizei *, length, GLint *, size, GLenum *, type, GLchar *, name); \
    HookWrapper4(void, glGetAttachedShaders, GLuint, program, GLsizei, maxCount, GLsizei *, count, GLuint *, shaders); \
    HookWrapper2(GLint, glGetAttribLocation, GLuint, program, const GLchar *, name); \
    HookWrapper2(void, glGetBooleanv, GLenum, pname, GLboolean *, data); \
    HookWrapper3(void, glGetBufferParameteriv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper0(GLenum, glGetError); \
    HookWrapper2(void, glGetFloatv, GLenum, pname, GLfloat *, data); \
    HookWrapper4(void, glGetFramebufferAttachmentParameteriv, GLenum, target, GLenum, attachment, GLenum, pname, GLint *, params); \
    HookWrapper2(void, glGetIntegerv, GLenum, pname, GLint *, data); \
    HookWrapper3(void, glGetProgramiv, GLuint, program, GLenum, pname, GLint *, params); \
    HookWrapper4(void, glGetProgramInfoLog, GLuint, program, GLsizei, bufSize, GLsizei *, length, GLchar *, infoLog); \
    HookWrapper3(void, glGetRenderbufferParameteriv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetShaderiv, GLuint, shader, GLenum, pname, GLint *, params); \
    HookWrapper4(void, glGetShaderInfoLog, GLuint, shader, GLsizei, bufSize, GLsizei *, length, GLchar *, infoLog); \
    HookWrapper4(void, glGetShaderPrecisionFormat, GLenum, shadertype, GLenum, precisiontype, GLint *, range, GLint *, precision); \
    HookWrapper4(void, glGetShaderSource, GLuint, shader, GLsizei, bufSize, GLsizei *, length, GLchar *, source); \
    HookWrapper1(const GLubyte *, glGetString, GLenum, name); \
    HookWrapper3(void, glGetTexParameterfv, GLenum, target, GLenum, pname, GLfloat *, params); \
    HookWrapper3(void, glGetTexParameteriv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetUniformfv, GLuint, program, GLint, location, GLfloat *, params); \
    HookWrapper3(void, glGetUniformiv, GLuint, program, GLint, location, GLint *, params); \
    HookWrapper2(GLint, glGetUniformLocation, GLuint, program, const GLchar *, name); \
    HookWrapper3(void, glGetVertexAttribfv, GLuint, index, GLenum, pname, GLfloat *, params); \
    HookWrapper3(void, glGetVertexAttribiv, GLuint, index, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetVertexAttribPointerv, GLuint, index, GLenum, pname, void **, pointer); \
    HookWrapper2(void, glHint, GLenum, target, GLenum, mode); \
    HookWrapper1(GLboolean, glIsBuffer, GLuint, buffer); \
    HookWrapper1(GLboolean, glIsEnabled, GLenum, cap); \
    HookWrapper1(GLboolean, glIsFramebuffer, GLuint, framebuffer); \
    HookWrapper1(GLboolean, glIsProgram, GLuint, program); \
    HookWrapper1(GLboolean, glIsRenderbuffer, GLuint, renderbuffer); \
    HookWrapper1(GLboolean, glIsShader, GLuint, shader); \
    HookWrapper1(GLboolean, glIsTexture, GLuint, texture); \
    HookWrapper1(void, glLineWidth, GLfloat, width); \
    HookWrapper1(void, glLinkProgram, GLuint, program); \
    HookWrapper2(void, glPixelStorei, GLenum, pname, GLint, param); \
    HookWrapper2(void, glPolygonOffset, GLfloat, factor, GLfloat, units); \
    HookWrapper7(void, glReadPixels, GLint, x, GLint, y, GLsizei, width, GLsizei, height, GLenum, format, GLenum, type, void *, pixels); \
    HookWrapper0(void, glReleaseShaderCompiler); \
    HookWrapper4(void, glRenderbufferStorage, GLenum, target, GLenum, internalformat, GLsizei, width, GLsizei, height); \
    HookWrapper2(void, glSampleCoverage, GLfloat, value, GLboolean, invert); \
    HookWrapper4(void, glScissor, GLint, x, GLint, y, GLsizei, width, GLsizei, height); \
    HookWrapper5(void, glShaderBinary, GLsizei, count, const GLuint *, shaders, GLenum, binaryformat, const void *, binary, GLsizei, length); \
    HookWrapper4(void, glShaderSource, GLuint, shader, GLsizei, count, const GLchar *const*, string, const GLint *, length); \
    HookWrapper3(void, glStencilFunc, GLenum, func, GLint, ref, GLuint, mask); \
    HookWrapper4(void, glStencilFuncSeparate, GLenum, face, GLenum, func, GLint, ref, GLuint, mask); \
    HookWrapper1(void, glStencilMask, GLuint, mask); \
    HookWrapper2(void, glStencilMaskSeparate, GLenum, face, GLuint, mask); \
    HookWrapper3(void, glStencilOp, GLenum, fail, GLenum, zfail, GLenum, zpass); \
    HookWrapper4(void, glStencilOpSeparate, GLenum, face, GLenum, sfail, GLenum, dpfail, GLenum, dppass); \
    HookWrapper9(void, glTexImage2D, GLenum, target, GLint, level, GLint, internalformat, GLsizei, width, GLsizei, height, GLint, border, GLenum, format, GLenum, type, const void *, pixels); \
    HookWrapper3(void, glTexParameterf, GLenum, target, GLenum, pname, GLfloat, param); \
    HookWrapper3(void, glTexParameterfv, GLenum, target, GLenum, pname, const GLfloat *, params); \
    HookWrapper3(void, glTexParameteri, GLenum, target, GLenum, pname, GLint, param); \
    HookWrapper3(void, glTexParameteriv, GLenum, target, GLenum, pname, const GLint *, params); \
    HookWrapper9(void, glTexSubImage2D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLsizei, width, GLsizei, height, GLenum, format, GLenum, type, const void *, pixels); \
    HookWrapper2(void, glUniform1f, GLint, location, GLfloat, v0); \
    HookWrapper3(void, glUniform1fv, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper2(void, glUniform1i, GLint, location, GLint, v0); \
    HookWrapper3(void, glUniform1iv, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper3(void, glUniform2f, GLint, location, GLfloat, v0, GLfloat, v1); \
    HookWrapper3(void, glUniform2fv, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper3(void, glUniform2i, GLint, location, GLint, v0, GLint, v1); \
    HookWrapper3(void, glUniform2iv, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glUniform3f, GLint, location, GLfloat, v0, GLfloat, v1, GLfloat, v2); \
    HookWrapper3(void, glUniform3fv, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper4(void, glUniform3i, GLint, location, GLint, v0, GLint, v1, GLint, v2); \
    HookWrapper3(void, glUniform3iv, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper5(void, glUniform4f, GLint, location, GLfloat, v0, GLfloat, v1, GLfloat, v2, GLfloat, v3); \
    HookWrapper3(void, glUniform4fv, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper5(void, glUniform4i, GLint, location, GLint, v0, GLint, v1, GLint, v2, GLint, v3); \
    HookWrapper3(void, glUniform4iv, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glUniformMatrix2fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix3fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix4fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper1(void, glUseProgram, GLuint, program); \
    HookWrapper1(void, glValidateProgram, GLuint, program); \
    HookWrapper2(void, glVertexAttrib1f, GLuint, index, GLfloat, x); \
    HookWrapper2(void, glVertexAttrib1fv, GLuint, index, const GLfloat *, v); \
    HookWrapper3(void, glVertexAttrib2f, GLuint, index, GLfloat, x, GLfloat, y); \
    HookWrapper2(void, glVertexAttrib2fv, GLuint, index, const GLfloat *, v); \
    HookWrapper4(void, glVertexAttrib3f, GLuint, index, GLfloat, x, GLfloat, y, GLfloat, z); \
    HookWrapper2(void, glVertexAttrib3fv, GLuint, index, const GLfloat *, v); \
    HookWrapper5(void, glVertexAttrib4f, GLuint, index, GLfloat, x, GLfloat, y, GLfloat, z, GLfloat, w); \
    HookWrapper2(void, glVertexAttrib4fv, GLuint, index, const GLfloat *, v); \
    HookWrapper6(void, glVertexAttribPointer, GLuint, index, GLint, size, GLenum, type, GLboolean, normalized, GLsizei, stride, const void *, pointer); \
    HookWrapper4(void, glViewport, GLint, x, GLint, y, GLsizei, width, GLsizei, height); \
    HookWrapper1(void, glReadBuffer, GLenum, src); \
    HookWrapper6(void, glDrawRangeElements, GLenum, mode, GLuint, start, GLuint, end, GLsizei, count, GLenum, type, const void *, indices); \
    HookWrapper10(void, glTexImage3D, GLenum, target, GLint, level, GLint, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth, GLint, border, GLenum, format, GLenum, type, const void *, pixels); \
    HookWrapper11(void, glTexSubImage3D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLsizei, width, GLsizei, height, GLsizei, depth, GLenum, format, GLenum, type, const void *, pixels); \
    HookWrapper9(void, glCopyTexSubImage3D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLint, x, GLint, y, GLsizei, width, GLsizei, height); \
    HookWrapper9(void, glCompressedTexImage3D, GLenum, target, GLint, level, GLenum, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth, GLint, border, GLsizei, imageSize, const void *, data); \
    HookWrapper11(void, glCompressedTexSubImage3D, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLsizei, width, GLsizei, height, GLsizei, depth, GLenum, format, GLsizei, imageSize, const void *, data); \
    HookWrapper2(void, glGenQueries, GLsizei, n, GLuint *, ids); \
    HookWrapper2(void, glDeleteQueries, GLsizei, n, const GLuint *, ids); \
    HookWrapper1(GLboolean, glIsQuery, GLuint, id); \
    HookWrapper2(void, glBeginQuery, GLenum, target, GLuint, id); \
    HookWrapper1(void, glEndQuery, GLenum, target); \
    HookWrapper3(void, glGetQueryiv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetQueryObjectuiv, GLuint, id, GLenum, pname, GLuint *, params); \
    HookWrapper1(GLboolean, glUnmapBuffer, GLenum, target); \
    HookWrapper3(void, glGetBufferPointerv, GLenum, target, GLenum, pname, void **, params); \
    HookWrapper2(void, glDrawBuffers, GLsizei, n, const GLenum *, bufs); \
    HookWrapper4(void, glUniformMatrix2x3fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix3x2fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix2x4fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix4x2fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix3x4fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper4(void, glUniformMatrix4x3fv, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper10(void, glBlitFramebuffer, GLint, srcX0, GLint, srcY0, GLint, srcX1, GLint, srcY1, GLint, dstX0, GLint, dstY0, GLint, dstX1, GLint, dstY1, GLbitfield, mask, GLenum, filter); \
    HookWrapper5(void, glRenderbufferStorageMultisample, GLenum, target, GLsizei, samples, GLenum, internalformat, GLsizei, width, GLsizei, height); \
    HookWrapper5(void, glFramebufferTextureLayer, GLenum, target, GLenum, attachment, GLuint, texture, GLint, level, GLint, layer); \
    HookWrapper4(void *, glMapBufferRange, GLenum, target, GLintptr, offset, GLsizeiptr, length, GLbitfield, access); \
    HookWrapper3(void, glFlushMappedBufferRange, GLenum, target, GLintptr, offset, GLsizeiptr, length); \
    HookWrapper1(void, glBindVertexArray, GLuint, array); \
    HookWrapper2(void, glDeleteVertexArrays, GLsizei, n, const GLuint *, arrays); \
    HookWrapper2(void, glGenVertexArrays, GLsizei, n, GLuint *, arrays); \
    HookWrapper1(GLboolean, glIsVertexArray, GLuint, array); \
    HookWrapper3(void, glGetIntegeri_v, GLenum, target, GLuint, index, GLint *, data); \
    HookWrapper1(void, glBeginTransformFeedback, GLenum, primitiveMode); \
    HookWrapper0(void, glEndTransformFeedback); \
    HookWrapper5(void, glBindBufferRange, GLenum, target, GLuint, index, GLuint, buffer, GLintptr, offset, GLsizeiptr, size); \
    HookWrapper3(void, glBindBufferBase, GLenum, target, GLuint, index, GLuint, buffer); \
    HookWrapper4(void, glTransformFeedbackVaryings, GLuint, program, GLsizei, count, const GLchar *const*, varyings, GLenum, bufferMode); \
    HookWrapper7(void, glGetTransformFeedbackVarying, GLuint, program, GLuint, index, GLsizei, bufSize, GLsizei *, length, GLsizei *, size, GLenum *, type, GLchar *, name); \
    HookWrapper5(void, glVertexAttribIPointer, GLuint, index, GLint, size, GLenum, type, GLsizei, stride, const void *, pointer); \
    HookWrapper3(void, glGetVertexAttribIiv, GLuint, index, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetVertexAttribIuiv, GLuint, index, GLenum, pname, GLuint *, params); \
    HookWrapper5(void, glVertexAttribI4i, GLuint, index, GLint, x, GLint, y, GLint, z, GLint, w); \
    HookWrapper5(void, glVertexAttribI4ui, GLuint, index, GLuint, x, GLuint, y, GLuint, z, GLuint, w); \
    HookWrapper2(void, glVertexAttribI4iv, GLuint, index, const GLint *, v); \
    HookWrapper2(void, glVertexAttribI4uiv, GLuint, index, const GLuint *, v); \
    HookWrapper3(void, glGetUniformuiv, GLuint, program, GLint, location, GLuint *, params); \
    HookWrapper2(GLint, glGetFragDataLocation, GLuint, program, const GLchar *, name); \
    HookWrapper2(void, glUniform1ui, GLint, location, GLuint, v0); \
    HookWrapper3(void, glUniform2ui, GLint, location, GLuint, v0, GLuint, v1); \
    HookWrapper4(void, glUniform3ui, GLint, location, GLuint, v0, GLuint, v1, GLuint, v2); \
    HookWrapper5(void, glUniform4ui, GLint, location, GLuint, v0, GLuint, v1, GLuint, v2, GLuint, v3); \
    HookWrapper3(void, glUniform1uiv, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper3(void, glUniform2uiv, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper3(void, glUniform3uiv, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper3(void, glUniform4uiv, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper3(void, glClearBufferiv, GLenum, buffer, GLint, drawbuffer, const GLint *, value); \
    HookWrapper3(void, glClearBufferuiv, GLenum, buffer, GLint, drawbuffer, const GLuint *, value); \
    HookWrapper3(void, glClearBufferfv, GLenum, buffer, GLint, drawbuffer, const GLfloat *, value); \
    HookWrapper4(void, glClearBufferfi, GLenum, buffer, GLint, drawbuffer, GLfloat, depth, GLint, stencil); \
    HookWrapper2(const GLubyte *, glGetStringi, GLenum, name, GLuint, index); \
    HookWrapper5(void, glCopyBufferSubData, GLenum, readTarget, GLenum, writeTarget, GLintptr, readOffset, GLintptr, writeOffset, GLsizeiptr, size); \
    HookWrapper4(void, glGetUniformIndices, GLuint, program, GLsizei, uniformCount, const GLchar *const*, uniformNames, GLuint *, uniformIndices); \
    HookWrapper5(void, glGetActiveUniformsiv, GLuint, program, GLsizei, uniformCount, const GLuint *, uniformIndices, GLenum, pname, GLint *, params); \
    HookWrapper2(GLuint, glGetUniformBlockIndex, GLuint, program, const GLchar *, uniformBlockName); \
    HookWrapper4(void, glGetActiveUniformBlockiv, GLuint, program, GLuint, uniformBlockIndex, GLenum, pname, GLint *, params); \
    HookWrapper5(void, glGetActiveUniformBlockName, GLuint, program, GLuint, uniformBlockIndex, GLsizei, bufSize, GLsizei *, length, GLchar *, uniformBlockName); \
    HookWrapper3(void, glUniformBlockBinding, GLuint, program, GLuint, uniformBlockIndex, GLuint, uniformBlockBinding); \
    HookWrapper4(void, glDrawArraysInstanced, GLenum, mode, GLint, first, GLsizei, count, GLsizei, instancecount); \
    HookWrapper5(void, glDrawElementsInstanced, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices, GLsizei, instancecount); \
    HookWrapper2(GLsync, glFenceSync, GLenum, condition, GLbitfield, flags); \
    HookWrapper1(GLboolean, glIsSync, GLsync, sync); \
    HookWrapper1(void, glDeleteSync, GLsync, sync); \
    HookWrapper3(GLenum, glClientWaitSync, GLsync, sync, GLbitfield, flags, GLuint64, timeout); \
    HookWrapper3(void, glWaitSync, GLsync, sync, GLbitfield, flags, GLuint64, timeout); \
    HookWrapper2(void, glGetInteger64v, GLenum, pname, GLint64 *, data); \
    HookWrapper5(void, glGetSynciv, GLsync, sync, GLenum, pname, GLsizei, bufSize, GLsizei *, length, GLint *, values); \
    HookWrapper3(void, glGetInteger64i_v, GLenum, target, GLuint, index, GLint64 *, data); \
    HookWrapper3(void, glGetBufferParameteri64v, GLenum, target, GLenum, pname, GLint64 *, params); \
    HookWrapper2(void, glGenSamplers, GLsizei, count, GLuint *, samplers); \
    HookWrapper2(void, glDeleteSamplers, GLsizei, count, const GLuint *, samplers); \
    HookWrapper1(GLboolean, glIsSampler, GLuint, sampler); \
    HookWrapper2(void, glBindSampler, GLuint, unit, GLuint, sampler); \
    HookWrapper3(void, glSamplerParameteri, GLuint, sampler, GLenum, pname, GLint, param); \
    HookWrapper3(void, glSamplerParameteriv, GLuint, sampler, GLenum, pname, const GLint *, param); \
    HookWrapper3(void, glSamplerParameterf, GLuint, sampler, GLenum, pname, GLfloat, param); \
    HookWrapper3(void, glSamplerParameterfv, GLuint, sampler, GLenum, pname, const GLfloat *, param); \
    HookWrapper3(void, glGetSamplerParameteriv, GLuint, sampler, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetSamplerParameterfv, GLuint, sampler, GLenum, pname, GLfloat *, params); \
    HookWrapper2(void, glVertexAttribDivisor, GLuint, index, GLuint, divisor); \
    HookWrapper2(void, glBindTransformFeedback, GLenum, target, GLuint, id); \
    HookWrapper2(void, glDeleteTransformFeedbacks, GLsizei, n, const GLuint *, ids); \
    HookWrapper2(void, glGenTransformFeedbacks, GLsizei, n, GLuint *, ids); \
    HookWrapper1(GLboolean, glIsTransformFeedback, GLuint, id); \
    HookWrapper0(void, glPauseTransformFeedback); \
    HookWrapper0(void, glResumeTransformFeedback); \
    HookWrapper5(void, glGetProgramBinary, GLuint, program, GLsizei, bufSize, GLsizei *, length, GLenum *, binaryFormat, void *, binary); \
    HookWrapper4(void, glProgramBinary, GLuint, program, GLenum, binaryFormat, const void *, binary, GLsizei, length); \
    HookWrapper3(void, glProgramParameteri, GLuint, program, GLenum, pname, GLint, value); \
    HookWrapper3(void, glInvalidateFramebuffer, GLenum, target, GLsizei, numAttachments, const GLenum *, attachments); \
    HookWrapper7(void, glInvalidateSubFramebuffer, GLenum, target, GLsizei, numAttachments, const GLenum *, attachments, GLint, x, GLint, y, GLsizei, width, GLsizei, height); \
    HookWrapper5(void, glTexStorage2D, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width, GLsizei, height); \
    HookWrapper6(void, glTexStorage3D, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth); \
    HookWrapper5(void, glGetInternalformativ, GLenum, target, GLenum, internalformat, GLenum, pname, GLsizei, bufSize, GLint *, params); \
    HookWrapper3(void, glDispatchCompute, GLuint, num_groups_x, GLuint, num_groups_y, GLuint, num_groups_z); \
    HookWrapper1(void, glDispatchComputeIndirect, GLintptr, indirect); \
    HookWrapper2(void, glDrawArraysIndirect, GLenum, mode, const void *, indirect); \
    HookWrapper3(void, glDrawElementsIndirect, GLenum, mode, GLenum, type, const void *, indirect); \
    HookWrapper3(void, glFramebufferParameteri, GLenum, target, GLenum, pname, GLint, param); \
    HookWrapper3(void, glGetFramebufferParameteriv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper4(void, glGetProgramInterfaceiv, GLuint, program, GLenum, programInterface, GLenum, pname, GLint *, params); \
    HookWrapper3(GLuint, glGetProgramResourceIndex, GLuint, program, GLenum, programInterface, const GLchar *, name); \
    HookWrapper6(void, glGetProgramResourceName, GLuint, program, GLenum, programInterface, GLuint, index, GLsizei, bufSize, GLsizei *, length, GLchar *, name); \
    HookWrapper8(void, glGetProgramResourceiv, GLuint, program, GLenum, programInterface, GLuint, index, GLsizei, propCount, const GLenum *, props, GLsizei, bufSize, GLsizei *, length, GLint *, params); \
    HookWrapper3(GLint, glGetProgramResourceLocation, GLuint, program, GLenum, programInterface, const GLchar *, name); \
    HookWrapper3(void, glUseProgramStages, GLuint, pipeline, GLbitfield, stages, GLuint, program); \
    HookWrapper2(void, glActiveShaderProgram, GLuint, pipeline, GLuint, program); \
    HookWrapper3(GLuint, glCreateShaderProgramv, GLenum, type, GLsizei, count, const GLchar *const*, strings); \
    HookWrapper1(void, glBindProgramPipeline, GLuint, pipeline); \
    HookWrapper2(void, glDeleteProgramPipelines, GLsizei, n, const GLuint *, pipelines); \
    HookWrapper2(void, glGenProgramPipelines, GLsizei, n, GLuint *, pipelines); \
    HookWrapper1(GLboolean, glIsProgramPipeline, GLuint, pipeline); \
    HookWrapper3(void, glGetProgramPipelineiv, GLuint, pipeline, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glProgramUniform1i, GLuint, program, GLint, location, GLint, v0); \
    HookWrapper4(void, glProgramUniform2i, GLuint, program, GLint, location, GLint, v0, GLint, v1); \
    HookWrapper5(void, glProgramUniform3i, GLuint, program, GLint, location, GLint, v0, GLint, v1, GLint, v2); \
    HookWrapper6(void, glProgramUniform4i, GLuint, program, GLint, location, GLint, v0, GLint, v1, GLint, v2, GLint, v3); \
    HookWrapper3(void, glProgramUniform1ui, GLuint, program, GLint, location, GLuint, v0); \
    HookWrapper4(void, glProgramUniform2ui, GLuint, program, GLint, location, GLuint, v0, GLuint, v1); \
    HookWrapper5(void, glProgramUniform3ui, GLuint, program, GLint, location, GLuint, v0, GLuint, v1, GLuint, v2); \
    HookWrapper6(void, glProgramUniform4ui, GLuint, program, GLint, location, GLuint, v0, GLuint, v1, GLuint, v2, GLuint, v3); \
    HookWrapper3(void, glProgramUniform1f, GLuint, program, GLint, location, GLfloat, v0); \
    HookWrapper4(void, glProgramUniform2f, GLuint, program, GLint, location, GLfloat, v0, GLfloat, v1); \
    HookWrapper5(void, glProgramUniform3f, GLuint, program, GLint, location, GLfloat, v0, GLfloat, v1, GLfloat, v2); \
    HookWrapper6(void, glProgramUniform4f, GLuint, program, GLint, location, GLfloat, v0, GLfloat, v1, GLfloat, v2, GLfloat, v3); \
    HookWrapper4(void, glProgramUniform1iv, GLuint, program, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glProgramUniform2iv, GLuint, program, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glProgramUniform3iv, GLuint, program, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glProgramUniform4iv, GLuint, program, GLint, location, GLsizei, count, const GLint *, value); \
    HookWrapper4(void, glProgramUniform1uiv, GLuint, program, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper4(void, glProgramUniform2uiv, GLuint, program, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper4(void, glProgramUniform3uiv, GLuint, program, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper4(void, glProgramUniform4uiv, GLuint, program, GLint, location, GLsizei, count, const GLuint *, value); \
    HookWrapper4(void, glProgramUniform1fv, GLuint, program, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper4(void, glProgramUniform2fv, GLuint, program, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper4(void, glProgramUniform3fv, GLuint, program, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper4(void, glProgramUniform4fv, GLuint, program, GLint, location, GLsizei, count, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix2fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix3fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix4fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix2x3fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix3x2fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix2x4fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix4x2fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix3x4fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper5(void, glProgramUniformMatrix4x3fv, GLuint, program, GLint, location, GLsizei, count, GLboolean, transpose, const GLfloat *, value); \
    HookWrapper1(void, glValidateProgramPipeline, GLuint, pipeline); \
    HookWrapper4(void, glGetProgramPipelineInfoLog, GLuint, pipeline, GLsizei, bufSize, GLsizei *, length, GLchar *, infoLog); \
    HookWrapper7(void, glBindImageTexture, GLuint, unit, GLuint, texture, GLint, level, GLboolean, layered, GLint, layer, GLenum, access, GLenum, format); \
    HookWrapper3(void, glGetBooleani_v, GLenum, target, GLuint, index, GLboolean *, data); \
    HookWrapper1(void, glMemoryBarrier, GLbitfield, barriers); \
    HookWrapper1(void, glMemoryBarrierByRegion, GLbitfield, barriers); \
    HookWrapper6(void, glTexStorage2DMultisample, GLenum, target, GLsizei, samples, GLenum, internalformat, GLsizei, width, GLsizei, height, GLboolean, fixedsamplelocations); \
    HookWrapper3(void, glGetMultisamplefv, GLenum, pname, GLuint, index, GLfloat *, val); \
    HookWrapper2(void, glSampleMaski, GLuint, maskNumber, GLbitfield, mask); \
    HookWrapper4(void, glGetTexLevelParameteriv, GLenum, target, GLint, level, GLenum, pname, GLint *, params); \
    HookWrapper4(void, glGetTexLevelParameterfv, GLenum, target, GLint, level, GLenum, pname, GLfloat *, params); \
    HookWrapper4(void, glBindVertexBuffer, GLuint, bindingindex, GLuint, buffer, GLintptr, offset, GLsizei, stride); \
    HookWrapper5(void, glVertexAttribFormat, GLuint, attribindex, GLint, size, GLenum, type, GLboolean, normalized, GLuint, relativeoffset); \
    HookWrapper4(void, glVertexAttribIFormat, GLuint, attribindex, GLint, size, GLenum, type, GLuint, relativeoffset); \
    HookWrapper2(void, glVertexAttribBinding, GLuint, attribindex, GLuint, bindingindex); \
    HookWrapper2(void, glVertexBindingDivisor, GLuint, bindingindex, GLuint, divisor); \
    HookWrapper0(void, glBlendBarrier); \
    HookWrapper15(void, glCopyImageSubData, GLuint, srcName, GLenum, srcTarget, GLint, srcLevel, GLint, srcX, GLint, srcY, GLint, srcZ, GLuint, dstName, GLenum, dstTarget, GLint, dstLevel, GLint, dstX, GLint, dstY, GLint, dstZ, GLsizei, srcWidth, GLsizei, srcHeight, GLsizei, srcDepth); \
    HookWrapper6(void, glDebugMessageControl, GLenum, source, GLenum, type, GLenum, severity, GLsizei, count, const GLuint *, ids, GLboolean, enabled); \
    HookWrapper6(void, glDebugMessageInsert, GLenum, source, GLenum, type, GLuint, id, GLenum, severity, GLsizei, length, const GLchar *, buf); \
    HookWrapper2(void, glDebugMessageCallback, GLDEBUGPROC, callback, const void *, userParam); \
    HookWrapper8(GLuint, glGetDebugMessageLog, GLuint, count, GLsizei, bufSize, GLenum *, sources, GLenum *, types, GLuint *, ids, GLenum *, severities, GLsizei *, lengths, GLchar *, messageLog); \
    HookWrapper4(void, glPushDebugGroup, GLenum, source, GLuint, id, GLsizei, length, const GLchar *, message); \
    HookWrapper0(void, glPopDebugGroup); \
    HookWrapper4(void, glObjectLabel, GLenum, identifier, GLuint, name, GLsizei, length, const GLchar *, label); \
    HookWrapper5(void, glGetObjectLabel, GLenum, identifier, GLuint, name, GLsizei, bufSize, GLsizei *, length, GLchar *, label); \
    HookWrapper3(void, glObjectPtrLabel, const void *, ptr, GLsizei, length, const GLchar *, label); \
    HookWrapper4(void, glGetObjectPtrLabel, const void *, ptr, GLsizei, bufSize, GLsizei *, length, GLchar *, label); \
    HookWrapper2(void, glGetPointerv, GLenum, pname, void **, params); \
    HookWrapper2(void, glEnablei, GLenum, target, GLuint, index); \
    HookWrapper2(void, glDisablei, GLenum, target, GLuint, index); \
    HookWrapper2(void, glBlendEquationi, GLuint, buf, GLenum, mode); \
    HookWrapper3(void, glBlendEquationSeparatei, GLuint, buf, GLenum, modeRGB, GLenum, modeAlpha); \
    HookWrapper3(void, glBlendFunci, GLuint, buf, GLenum, src, GLenum, dst); \
    HookWrapper5(void, glBlendFuncSeparatei, GLuint, buf, GLenum, srcRGB, GLenum, dstRGB, GLenum, srcAlpha, GLenum, dstAlpha); \
    HookWrapper5(void, glColorMaski, GLuint, index, GLboolean, r, GLboolean, g, GLboolean, b, GLboolean, a); \
    HookWrapper2(GLboolean, glIsEnabledi, GLenum, target, GLuint, index); \
    HookWrapper5(void, glDrawElementsBaseVertex, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices, GLint, basevertex); \
    HookWrapper7(void, glDrawRangeElementsBaseVertex, GLenum, mode, GLuint, start, GLuint, end, GLsizei, count, GLenum, type, const void *, indices, GLint, basevertex); \
    HookWrapper6(void, glDrawElementsInstancedBaseVertex, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices, GLsizei, instancecount, GLint, basevertex); \
    HookWrapper4(void, glFramebufferTexture, GLenum, target, GLenum, attachment, GLuint, texture, GLint, level); \
    HookWrapper8(void, glPrimitiveBoundingBox, GLfloat, minX, GLfloat, minY, GLfloat, minZ, GLfloat, minW, GLfloat, maxX, GLfloat, maxY, GLfloat, maxZ, GLfloat, maxW); \
    HookWrapper0(GLenum, glGetGraphicsResetStatus); \
    HookWrapper8(void, glReadnPixels, GLint, x, GLint, y, GLsizei, width, GLsizei, height, GLenum, format, GLenum, type, GLsizei, bufSize, void *, data); \
    HookWrapper4(void, glGetnUniformfv, GLuint, program, GLint, location, GLsizei, bufSize, GLfloat *, params); \
    HookWrapper4(void, glGetnUniformiv, GLuint, program, GLint, location, GLsizei, bufSize, GLint *, params); \
    HookWrapper4(void, glGetnUniformuiv, GLuint, program, GLint, location, GLsizei, bufSize, GLuint *, params); \
    HookWrapper1(void, glMinSampleShading, GLfloat, value); \
    HookWrapper2(void, glPatchParameteri, GLenum, pname, GLint, value); \
    HookWrapper3(void, glTexParameterIiv, GLenum, target, GLenum, pname, const GLint *, params); \
    HookWrapper3(void, glTexParameterIuiv, GLenum, target, GLenum, pname, const GLuint *, params); \
    HookWrapper3(void, glGetTexParameterIiv, GLenum, target, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetTexParameterIuiv, GLenum, target, GLenum, pname, GLuint *, params); \
    HookWrapper3(void, glSamplerParameterIiv, GLuint, sampler, GLenum, pname, const GLint *, param); \
    HookWrapper3(void, glSamplerParameterIuiv, GLuint, sampler, GLenum, pname, const GLuint *, param); \
    HookWrapper3(void, glGetSamplerParameterIiv, GLuint, sampler, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetSamplerParameterIuiv, GLuint, sampler, GLenum, pname, GLuint *, params); \
    HookWrapper3(void, glTexBuffer, GLenum, target, GLenum, internalformat, GLuint, buffer); \
    HookWrapper5(void, glTexBufferRange, GLenum, target, GLenum, internalformat, GLuint, buffer, GLintptr, offset, GLsizeiptr, size); \
    HookWrapper7(void, glTexStorage3DMultisample, GLenum, target, GLsizei, samples, GLenum, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth, GLboolean, fixedsamplelocations); \



// gl extensions
#define DefineGLExtensionHooks() \
    HookWrapper2(void *, glMapBufferOES, GLenum, target, GLenum, access); \
    HookWrapper6(void, glFramebufferTexture3DOES, GLenum, target, GLenum, attachment, GLenum, textarget, GLuint, texture, GLint, level, GLint, zoffset); \
    HookWrapper3(void, glViewportArrayvOES, GLuint, first, GLsizei, count, const GLfloat *, v); \
    HookWrapper5(void, glViewportIndexedfOES, GLuint, index, GLfloat, x, GLfloat, y, GLfloat, w, GLfloat, h); \
    HookWrapper2(void, glViewportIndexedfvOES, GLuint, index, const GLfloat *, v); \
    HookWrapper3(void, glScissorArrayvOES, GLuint, first, GLsizei, count, const GLint *, v); \
    HookWrapper5(void, glScissorIndexedOES, GLuint, index, GLint, left, GLint, bottom, GLsizei, width, GLsizei, height); \
    HookWrapper2(void, glScissorIndexedvOES, GLuint, index, const GLint *, v); \
    HookWrapper3(void, glDepthRangeArrayfvOES, GLuint, first, GLsizei, count, const GLfloat *, v); \
    HookWrapper3(void, glDepthRangeIndexedfOES, GLuint, index, GLfloat, n, GLfloat, f); \
    HookWrapper3(void, glGetFloati_vOES, GLenum, target, GLuint, index, GLfloat *, data); \
    HookWrapper5(void, glDrawArraysInstancedBaseInstanceEXT, GLenum, mode, GLint, first, GLsizei, count, GLsizei, instancecount, GLuint, baseinstance); \
    HookWrapper6(void, glDrawElementsInstancedBaseInstanceEXT, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices, GLsizei, instancecount, GLuint, baseinstance); \
    HookWrapper7(void, glDrawElementsInstancedBaseVertexBaseInstanceEXT, GLenum, mode, GLsizei, count, GLenum, type, const void *, indices, GLsizei, instancecount, GLint, basevertex, GLuint, baseinstance); \
    HookWrapper4(void, glBindFragDataLocationIndexedEXT, GLuint, program, GLuint, colorNumber, GLuint, index, const GLchar *, name); \
    HookWrapper3(void, glBindFragDataLocationEXT, GLuint, program, GLuint, color, const GLchar *, name); \
    HookWrapper3(GLint, glGetProgramResourceLocationIndexEXT, GLuint, program, GLenum, programInterface, const GLchar *, name); \
    HookWrapper2(GLint, glGetFragDataIndexEXT, GLuint, program, const GLchar *, name); \
    HookWrapper4(void, glBufferStorageEXT, GLenum, target, GLsizeiptr, size, const void *, data, GLbitfield, flags); \
    HookWrapper4(void, glLabelObjectEXT, GLenum, type, GLuint, object, GLsizei, length, const GLchar *, label); \
    HookWrapper2(void, glInsertEventMarkerEXT, GLsizei, length, const GLchar *, marker); \
    HookWrapper2(void, glPushGroupMarkerEXT, GLsizei, length, const GLchar *, marker); \
    HookWrapper0(void, glPopGroupMarkerEXT); \
    HookWrapper2(void, glQueryCounterEXT, GLuint, id, GLenum, target); \
    HookWrapper3(void, glGetQueryObjectivEXT, GLuint, id, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glGetQueryObjecti64vEXT, GLuint, id, GLenum, pname, GLint64 *, params); \
    HookWrapper3(void, glGetQueryObjectui64vEXT, GLuint, id, GLenum, pname, GLuint64 *, params); \
    HookWrapper6(void, glFramebufferTexture2DMultisampleEXT, GLenum, target, GLenum, attachment, GLenum, textarget, GLuint, texture, GLint, level, GLsizei, samples); \
    HookWrapper3(void, glPolygonOffsetClampEXT, GLfloat, factor, GLfloat, units, GLfloat, clamp); \
    HookWrapper2(void, glRasterSamplesEXT, GLuint, samples, GLboolean, fixedsamplelocations); \
    HookWrapper4(void, glTexStorage1DEXT, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width); \
    HookWrapper5(void, glTextureStorage1DEXT, GLuint, texture, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width); \
    HookWrapper6(void, glTextureStorage2DEXT, GLuint, texture, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width, GLsizei, height); \
    HookWrapper7(void, glTextureStorage3DEXT, GLuint, texture, GLenum, target, GLsizei, levels, GLenum, internalformat, GLsizei, width, GLsizei, height, GLsizei, depth); \
    HookWrapper8(void, glTextureViewEXT, GLuint, texture, GLenum, target, GLuint, origtexture, GLenum, internalformat, GLuint, minlevel, GLuint, numlevels, GLuint, minlayer, GLuint, numlayers); \
    HookWrapper6(void, glFramebufferTexture2DMultisampleIMG, GLenum, target, GLenum, attachment, GLenum, textarget, GLuint, texture, GLint, level, GLsizei, samples); \
    HookWrapper2(void, glBeginConditionalRenderNV, GLuint, id, GLenum, mode); \
    HookWrapper0(void, glEndConditionalRenderNV); \
    HookWrapper2(void, glPolygonModeNV, GLenum, face, GLenum, mode); \
    HookWrapper3(void, glViewportArrayvNV, GLuint, first, GLsizei, count, const GLfloat *, v); \
    HookWrapper5(void, glViewportIndexedfNV, GLuint, index, GLfloat, x, GLfloat, y, GLfloat, w, GLfloat, h); \
    HookWrapper2(void, glViewportIndexedfvNV, GLuint, index, const GLfloat *, v); \
    HookWrapper3(void, glScissorArrayvNV, GLuint, first, GLsizei, count, const GLint *, v); \
    HookWrapper5(void, glScissorIndexedNV, GLuint, index, GLint, left, GLint, bottom, GLsizei, width, GLsizei, height); \
    HookWrapper2(void, glScissorIndexedvNV, GLuint, index, const GLint *, v); \
    HookWrapper3(void, glDepthRangeArrayfvNV, GLuint, first, GLsizei, count, const GLfloat *, v); \
    HookWrapper3(void, glDepthRangeIndexedfNV, GLuint, index, GLfloat, n, GLfloat, f); \
    HookWrapper3(void, glGetFloati_vNV, GLenum, target, GLuint, index, GLfloat *, data); \



// unsupported entry points - used for dummy functions
#define DefineUnsupportedDummies() \
    HookWrapper2(void, glEGLImageTargetTexture2DOES, GLenum, target, GLeglImageOES, image); \
    HookWrapper2(void, glEGLImageTargetRenderbufferStorageOES, GLenum, target, GLeglImageOES, image); \
    HookWrapper6(void, glMultiDrawElementsBaseVertexOES, GLenum, mode, const GLsizei *, count, GLenum, type, const void *const*, indices, GLsizei, primcount, const GLint *, basevertex); \
    HookWrapper8(void, glTextureViewOES, GLuint, texture, GLenum, target, GLuint, origtexture, GLenum, internalformat, GLuint, minlevel, GLuint, numlevels, GLuint, minlayer, GLuint, numlayers); \
    HookWrapper3(void, glGetPerfMonitorGroupsAMD, GLint *, numGroups, GLsizei, groupsSize, GLuint *, groups); \
    HookWrapper5(void, glGetPerfMonitorCountersAMD, GLuint, group, GLint *, numCounters, GLint *, maxActiveCounters, GLsizei, counterSize, GLuint *, counters); \
    HookWrapper4(void, glGetPerfMonitorGroupStringAMD, GLuint, group, GLsizei, bufSize, GLsizei *, length, GLchar *, groupString); \
    HookWrapper5(void, glGetPerfMonitorCounterStringAMD, GLuint, group, GLuint, counter, GLsizei, bufSize, GLsizei *, length, GLchar *, counterString); \
    HookWrapper4(void, glGetPerfMonitorCounterInfoAMD, GLuint, group, GLuint, counter, GLenum, pname, void *, data); \
    HookWrapper2(void, glGenPerfMonitorsAMD, GLsizei, n, GLuint *, monitors); \
    HookWrapper2(void, glDeletePerfMonitorsAMD, GLsizei, n, GLuint *, monitors); \
    HookWrapper5(void, glSelectPerfMonitorCountersAMD, GLuint, monitor, GLboolean, enable, GLuint, group, GLint, numCounters, GLuint *, counterList); \
    HookWrapper1(void, glBeginPerfMonitorAMD, GLuint, monitor); \
    HookWrapper1(void, glEndPerfMonitorAMD, GLuint, monitor); \
    HookWrapper5(void, glGetPerfMonitorCounterDataAMD, GLuint, monitor, GLenum, pname, GLsizei, dataSize, GLuint *, data, GLint *, bytesWritten); \
    HookWrapper4(void, glGetTranslatedShaderSourceANGLE, GLuint, shader, GLsizei, bufsize, GLsizei *, length, GLchar *, source); \
    HookWrapper4(void, glCopyTextureLevelsAPPLE, GLuint, destinationTexture, GLuint, sourceTexture, GLint, sourceBaseLevel, GLsizei, sourceLevelCount); \
    HookWrapper0(void, glResolveMultisampleFramebufferAPPLE); \
    HookWrapper5(void, glClearTexImageEXT, GLuint, texture, GLint, level, GLenum, format, GLenum, type, const void *, data); \
    HookWrapper11(void, glClearTexSubImageEXT, GLuint, texture, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLsizei, width, GLsizei, height, GLsizei, depth, GLenum, format, GLenum, type, const void *, data); \
    HookWrapper3(void, glDiscardFramebufferEXT, GLenum, target, GLsizei, numAttachments, const GLenum *, attachments); \
    HookWrapper6(void, glMultiDrawElementsBaseVertexEXT, GLenum, mode, const GLsizei *, count, GLenum, type, const void *const*, indices, GLsizei, primcount, const GLint *, basevertex); \
    HookWrapper2(void, glDrawTransformFeedbackEXT, GLenum, mode, GLuint, id); \
    HookWrapper3(void, glDrawTransformFeedbackInstancedEXT, GLenum, mode, GLuint, id, GLsizei, instancecount); \
    HookWrapper4(void, glMultiDrawArraysEXT, GLenum, mode, const GLint *, first, const GLsizei *, count, GLsizei, primcount); \
    HookWrapper5(void, glMultiDrawElementsEXT, GLenum, mode, const GLsizei *, count, GLenum, type, const void *const*, indices, GLsizei, primcount); \
    HookWrapper4(void, glMultiDrawArraysIndirectEXT, GLenum, mode, const void *, indirect, GLsizei, drawcount, GLsizei, stride); \
    HookWrapper5(void, glMultiDrawElementsIndirectEXT, GLenum, mode, GLenum, type, const void *, indirect, GLsizei, drawcount, GLsizei, stride); \
    HookWrapper2(void, glReadBufferIndexedEXT, GLenum, src, GLint, index); \
    HookWrapper3(void, glDrawBuffersIndexedEXT, GLint, n, const GLenum *, location, const GLint *, indices); \
    HookWrapper2(void, glFramebufferPixelLocalStorageSizeEXT, GLuint, target, GLsizei, size); \
    HookWrapper1(GLsizei, glGetFramebufferPixelLocalStorageSizeEXT, GLuint, target); \
    HookWrapper3(void, glClearPixelLocalStorageuiEXT, GLsizei, offset, GLsizei, n, const GLuint *, values); \
    HookWrapper9(void, glTexPageCommitmentEXT, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLsizei, width, GLsizei, height, GLsizei, depth, GLboolean, commit); \
    HookWrapper3(void, glWindowRectanglesEXT, GLenum, mode, GLsizei, count, const GLint *, box); \
    HookWrapper1(GLuint64, glGetTextureHandleIMG, GLuint, texture); \
    HookWrapper2(GLuint64, glGetTextureSamplerHandleIMG, GLuint, texture, GLuint, sampler); \
    HookWrapper2(void, glUniformHandleui64IMG, GLint, location, GLuint64, value); \
    HookWrapper3(void, glUniformHandleui64vIMG, GLint, location, GLsizei, count, const GLuint64 *, value); \
    HookWrapper3(void, glProgramUniformHandleui64IMG, GLuint, program, GLint, location, GLuint64, value); \
    HookWrapper4(void, glProgramUniformHandleui64vIMG, GLuint, program, GLint, location, GLsizei, count, const GLuint64 *, values); \
    HookWrapper7(void, glFramebufferTexture2DDownsampleIMG, GLenum, target, GLenum, attachment, GLenum, textarget, GLuint, texture, GLint, level, GLint, xscale, GLint, yscale); \
    HookWrapper7(void, glFramebufferTextureLayerDownsampleIMG, GLenum, target, GLenum, attachment, GLuint, texture, GLint, level, GLint, layer, GLint, xscale, GLint, yscale); \
    HookWrapper0(void, glApplyFramebufferAttachmentCMAAINTEL); \
    HookWrapper1(void, glBeginPerfQueryINTEL, GLuint, queryHandle); \
    HookWrapper2(void, glCreatePerfQueryINTEL, GLuint, queryId, GLuint *, queryHandle); \
    HookWrapper1(void, glDeletePerfQueryINTEL, GLuint, queryHandle); \
    HookWrapper1(void, glEndPerfQueryINTEL, GLuint, queryHandle); \
    HookWrapper1(void, glGetFirstPerfQueryIdINTEL, GLuint *, queryId); \
    HookWrapper2(void, glGetNextPerfQueryIdINTEL, GLuint, queryId, GLuint *, nextQueryId); \
    HookWrapper11(void, glGetPerfCounterInfoINTEL, GLuint, queryId, GLuint, counterId, GLuint, counterNameLength, GLchar *, counterName, GLuint, counterDescLength, GLchar *, counterDesc, GLuint *, counterOffset, GLuint *, counterDataSize, GLuint *, counterTypeEnum, GLuint *, counterDataTypeEnum, GLuint64 *, rawCounterMaxValue); \
    HookWrapper5(void, glGetPerfQueryDataINTEL, GLuint, queryHandle, GLuint, flags, GLsizei, dataSize, GLvoid *, data, GLuint *, bytesWritten); \
    HookWrapper2(void, glGetPerfQueryIdByNameINTEL, GLchar *, queryName, GLuint *, queryId); \
    HookWrapper7(void, glGetPerfQueryInfoINTEL, GLuint, queryId, GLuint, queryNameLength, GLchar *, queryName, GLuint *, dataSize, GLuint *, noCounters, GLuint *, noInstances, GLuint *, capsMask); \
    HookWrapper1(GLuint64, glGetTextureHandleNV, GLuint, texture); \
    HookWrapper2(GLuint64, glGetTextureSamplerHandleNV, GLuint, texture, GLuint, sampler); \
    HookWrapper1(void, glMakeTextureHandleResidentNV, GLuint64, handle); \
    HookWrapper1(void, glMakeTextureHandleNonResidentNV, GLuint64, handle); \
    HookWrapper5(GLuint64, glGetImageHandleNV, GLuint, texture, GLint, level, GLboolean, layered, GLint, layer, GLenum, format); \
    HookWrapper2(void, glMakeImageHandleResidentNV, GLuint64, handle, GLenum, access); \
    HookWrapper1(void, glMakeImageHandleNonResidentNV, GLuint64, handle); \
    HookWrapper2(void, glUniformHandleui64NV, GLint, location, GLuint64, value); \
    HookWrapper3(void, glUniformHandleui64vNV, GLint, location, GLsizei, count, const GLuint64 *, value); \
    HookWrapper3(void, glProgramUniformHandleui64NV, GLuint, program, GLint, location, GLuint64, value); \
    HookWrapper4(void, glProgramUniformHandleui64vNV, GLuint, program, GLint, location, GLsizei, count, const GLuint64 *, values); \
    HookWrapper1(GLboolean, glIsTextureHandleResidentNV, GLuint64, handle); \
    HookWrapper1(GLboolean, glIsImageHandleResidentNV, GLuint64, handle); \
    HookWrapper2(void, glBlendParameteriNV, GLenum, pname, GLint, value); \
    HookWrapper2(void, glSubpixelPrecisionBiasNV, GLuint, xbits, GLuint, ybits); \
    HookWrapper2(void, glConservativeRasterParameteriNV, GLenum, pname, GLint, param); \
    HookWrapper1(void, glCoverageMaskNV, GLboolean, mask); \
    HookWrapper1(void, glCoverageOperationNV, GLenum, operation); \
    HookWrapper2(void, glDeleteFencesNV, GLsizei, n, const GLuint *, fences); \
    HookWrapper2(void, glGenFencesNV, GLsizei, n, GLuint *, fences); \
    HookWrapper1(GLboolean, glIsFenceNV, GLuint, fence); \
    HookWrapper1(GLboolean, glTestFenceNV, GLuint, fence); \
    HookWrapper3(void, glGetFenceivNV, GLuint, fence, GLenum, pname, GLint *, params); \
    HookWrapper1(void, glFinishFenceNV, GLuint, fence); \
    HookWrapper2(void, glSetFenceNV, GLuint, fence, GLenum, condition); \
    HookWrapper1(void, glFragmentCoverageColorNV, GLuint, color); \
    HookWrapper2(void, glCoverageModulationTableNV, GLsizei, n, const GLfloat *, v); \
    HookWrapper2(void, glGetCoverageModulationTableNV, GLsizei, bufsize, GLfloat *, v); \
    HookWrapper1(void, glCoverageModulationNV, GLenum, components); \
    HookWrapper2(void, glUniform1i64NV, GLint, location, GLint64EXT, x); \
    HookWrapper3(void, glUniform2i64NV, GLint, location, GLint64EXT, x, GLint64EXT, y); \
    HookWrapper4(void, glUniform3i64NV, GLint, location, GLint64EXT, x, GLint64EXT, y, GLint64EXT, z); \
    HookWrapper5(void, glUniform4i64NV, GLint, location, GLint64EXT, x, GLint64EXT, y, GLint64EXT, z, GLint64EXT, w); \
    HookWrapper3(void, glUniform1i64vNV, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper3(void, glUniform2i64vNV, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper3(void, glUniform3i64vNV, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper3(void, glUniform4i64vNV, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper2(void, glUniform1ui64NV, GLint, location, GLuint64EXT, x); \
    HookWrapper3(void, glUniform2ui64NV, GLint, location, GLuint64EXT, x, GLuint64EXT, y); \
    HookWrapper4(void, glUniform3ui64NV, GLint, location, GLuint64EXT, x, GLuint64EXT, y, GLuint64EXT, z); \
    HookWrapper5(void, glUniform4ui64NV, GLint, location, GLuint64EXT, x, GLuint64EXT, y, GLuint64EXT, z, GLuint64EXT, w); \
    HookWrapper3(void, glUniform1ui64vNV, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper3(void, glUniform2ui64vNV, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper3(void, glUniform3ui64vNV, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper3(void, glUniform4ui64vNV, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper3(void, glGetUniformi64vNV, GLuint, program, GLint, location, GLint64EXT *, params); \
    HookWrapper3(void, glProgramUniform1i64NV, GLuint, program, GLint, location, GLint64EXT, x); \
    HookWrapper4(void, glProgramUniform2i64NV, GLuint, program, GLint, location, GLint64EXT, x, GLint64EXT, y); \
    HookWrapper5(void, glProgramUniform3i64NV, GLuint, program, GLint, location, GLint64EXT, x, GLint64EXT, y, GLint64EXT, z); \
    HookWrapper6(void, glProgramUniform4i64NV, GLuint, program, GLint, location, GLint64EXT, x, GLint64EXT, y, GLint64EXT, z, GLint64EXT, w); \
    HookWrapper4(void, glProgramUniform1i64vNV, GLuint, program, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper4(void, glProgramUniform2i64vNV, GLuint, program, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper4(void, glProgramUniform3i64vNV, GLuint, program, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper4(void, glProgramUniform4i64vNV, GLuint, program, GLint, location, GLsizei, count, const GLint64EXT *, value); \
    HookWrapper3(void, glProgramUniform1ui64NV, GLuint, program, GLint, location, GLuint64EXT, x); \
    HookWrapper4(void, glProgramUniform2ui64NV, GLuint, program, GLint, location, GLuint64EXT, x, GLuint64EXT, y); \
    HookWrapper5(void, glProgramUniform3ui64NV, GLuint, program, GLint, location, GLuint64EXT, x, GLuint64EXT, y, GLuint64EXT, z); \
    HookWrapper6(void, glProgramUniform4ui64NV, GLuint, program, GLint, location, GLuint64EXT, x, GLuint64EXT, y, GLuint64EXT, z, GLuint64EXT, w); \
    HookWrapper4(void, glProgramUniform1ui64vNV, GLuint, program, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper4(void, glProgramUniform2ui64vNV, GLuint, program, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper4(void, glProgramUniform3ui64vNV, GLuint, program, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper4(void, glProgramUniform4ui64vNV, GLuint, program, GLint, location, GLsizei, count, const GLuint64EXT *, value); \
    HookWrapper6(void, glGetInternalformatSampleivNV, GLenum, target, GLenum, internalformat, GLsizei, samples, GLenum, pname, GLsizei, bufSize, GLint *, params); \
    HookWrapper1(GLuint, glGenPathsNV, GLsizei, range); \
    HookWrapper2(void, glDeletePathsNV, GLuint, path, GLsizei, range); \
    HookWrapper1(GLboolean, glIsPathNV, GLuint, path); \
    HookWrapper6(void, glPathCommandsNV, GLuint, path, GLsizei, numCommands, const GLubyte *, commands, GLsizei, numCoords, GLenum, coordType, const void *, coords); \
    HookWrapper4(void, glPathCoordsNV, GLuint, path, GLsizei, numCoords, GLenum, coordType, const void *, coords); \
    HookWrapper8(void, glPathSubCommandsNV, GLuint, path, GLsizei, commandStart, GLsizei, commandsToDelete, GLsizei, numCommands, const GLubyte *, commands, GLsizei, numCoords, GLenum, coordType, const void *, coords); \
    HookWrapper5(void, glPathSubCoordsNV, GLuint, path, GLsizei, coordStart, GLsizei, numCoords, GLenum, coordType, const void *, coords); \
    HookWrapper4(void, glPathStringNV, GLuint, path, GLenum, format, GLsizei, length, const void *, pathString); \
    HookWrapper10(void, glPathGlyphsNV, GLuint, firstPathName, GLenum, fontTarget, const void *, fontName, GLbitfield, fontStyle, GLsizei, numGlyphs, GLenum, type, const void *, charcodes, GLenum, handleMissingGlyphs, GLuint, pathParameterTemplate, GLfloat, emScale); \
    HookWrapper9(void, glPathGlyphRangeNV, GLuint, firstPathName, GLenum, fontTarget, const void *, fontName, GLbitfield, fontStyle, GLuint, firstGlyph, GLsizei, numGlyphs, GLenum, handleMissingGlyphs, GLuint, pathParameterTemplate, GLfloat, emScale); \
    HookWrapper4(void, glWeightPathsNV, GLuint, resultPath, GLsizei, numPaths, const GLuint *, paths, const GLfloat *, weights); \
    HookWrapper2(void, glCopyPathNV, GLuint, resultPath, GLuint, srcPath); \
    HookWrapper4(void, glInterpolatePathsNV, GLuint, resultPath, GLuint, pathA, GLuint, pathB, GLfloat, weight); \
    HookWrapper4(void, glTransformPathNV, GLuint, resultPath, GLuint, srcPath, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper3(void, glPathParameterivNV, GLuint, path, GLenum, pname, const GLint *, value); \
    HookWrapper3(void, glPathParameteriNV, GLuint, path, GLenum, pname, GLint, value); \
    HookWrapper3(void, glPathParameterfvNV, GLuint, path, GLenum, pname, const GLfloat *, value); \
    HookWrapper3(void, glPathParameterfNV, GLuint, path, GLenum, pname, GLfloat, value); \
    HookWrapper3(void, glPathDashArrayNV, GLuint, path, GLsizei, dashCount, const GLfloat *, dashArray); \
    HookWrapper3(void, glPathStencilFuncNV, GLenum, func, GLint, ref, GLuint, mask); \
    HookWrapper2(void, glPathStencilDepthOffsetNV, GLfloat, factor, GLfloat, units); \
    HookWrapper3(void, glStencilFillPathNV, GLuint, path, GLenum, fillMode, GLuint, mask); \
    HookWrapper3(void, glStencilStrokePathNV, GLuint, path, GLint, reference, GLuint, mask); \
    HookWrapper8(void, glStencilFillPathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLenum, fillMode, GLuint, mask, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper8(void, glStencilStrokePathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLint, reference, GLuint, mask, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper1(void, glPathCoverDepthFuncNV, GLenum, func); \
    HookWrapper2(void, glCoverFillPathNV, GLuint, path, GLenum, coverMode); \
    HookWrapper2(void, glCoverStrokePathNV, GLuint, path, GLenum, coverMode); \
    HookWrapper7(void, glCoverFillPathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLenum, coverMode, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper7(void, glCoverStrokePathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLenum, coverMode, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper3(void, glGetPathParameterivNV, GLuint, path, GLenum, pname, GLint *, value); \
    HookWrapper3(void, glGetPathParameterfvNV, GLuint, path, GLenum, pname, GLfloat *, value); \
    HookWrapper2(void, glGetPathCommandsNV, GLuint, path, GLubyte *, commands); \
    HookWrapper2(void, glGetPathCoordsNV, GLuint, path, GLfloat *, coords); \
    HookWrapper2(void, glGetPathDashArrayNV, GLuint, path, GLfloat *, dashArray); \
    HookWrapper7(void, glGetPathMetricsNV, GLbitfield, metricQueryMask, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLsizei, stride, GLfloat *, metrics); \
    HookWrapper5(void, glGetPathMetricRangeNV, GLbitfield, metricQueryMask, GLuint, firstPathName, GLsizei, numPaths, GLsizei, stride, GLfloat *, metrics); \
    HookWrapper9(void, glGetPathSpacingNV, GLenum, pathListMode, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLfloat, advanceScale, GLfloat, kerningScale, GLenum, transformType, GLfloat *, returnedSpacing); \
    HookWrapper4(GLboolean, glIsPointInFillPathNV, GLuint, path, GLuint, mask, GLfloat, x, GLfloat, y); \
    HookWrapper3(GLboolean, glIsPointInStrokePathNV, GLuint, path, GLfloat, x, GLfloat, y); \
    HookWrapper3(GLfloat, glGetPathLengthNV, GLuint, path, GLsizei, startSegment, GLsizei, numSegments); \
    HookWrapper8(GLboolean, glPointAlongPathNV, GLuint, path, GLsizei, startSegment, GLsizei, numSegments, GLfloat, distance, GLfloat *, x, GLfloat *, y, GLfloat *, tangentX, GLfloat *, tangentY); \
    HookWrapper2(void, glMatrixLoad3x2fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper2(void, glMatrixLoad3x3fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper2(void, glMatrixLoadTranspose3x3fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper2(void, glMatrixMult3x2fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper2(void, glMatrixMult3x3fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper2(void, glMatrixMultTranspose3x3fNV, GLenum, matrixMode, const GLfloat *, m); \
    HookWrapper4(void, glStencilThenCoverFillPathNV, GLuint, path, GLenum, fillMode, GLuint, mask, GLenum, coverMode); \
    HookWrapper4(void, glStencilThenCoverStrokePathNV, GLuint, path, GLint, reference, GLuint, mask, GLenum, coverMode); \
    HookWrapper9(void, glStencilThenCoverFillPathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLenum, fillMode, GLuint, mask, GLenum, coverMode, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper9(void, glStencilThenCoverStrokePathInstancedNV, GLsizei, numPaths, GLenum, pathNameType, const void *, paths, GLuint, pathBase, GLint, reference, GLuint, mask, GLenum, coverMode, GLenum, transformType, const GLfloat *, transformValues); \
    HookWrapper6(GLenum, glPathGlyphIndexRangeNV, GLenum, fontTarget, const void *, fontName, GLbitfield, fontStyle, GLuint, pathParameterTemplate, GLfloat, emScale, GLuint *, baseAndCount); \
    HookWrapper8(GLenum, glPathGlyphIndexArrayNV, GLuint, firstPathName, GLenum, fontTarget, const void *, fontName, GLbitfield, fontStyle, GLuint, firstGlyphIndex, GLsizei, numGlyphs, GLuint, pathParameterTemplate, GLfloat, emScale); \
    HookWrapper9(GLenum, glPathMemoryGlyphIndexArrayNV, GLuint, firstPathName, GLenum, fontTarget, GLsizeiptr, fontSize, const void *, fontData, GLsizei, faceIndex, GLuint, firstGlyphIndex, GLsizei, numGlyphs, GLuint, pathParameterTemplate, GLfloat, emScale); \
    HookWrapper5(void, glProgramPathFragmentInputGenNV, GLuint, program, GLint, location, GLenum, genMode, GLint, components, const GLfloat *, coeffs); \
    HookWrapper8(void, glGetProgramResourcefvNV, GLuint, program, GLenum, programInterface, GLuint, index, GLsizei, propCount, const GLenum *, props, GLsizei, bufSize, GLsizei *, length, GLfloat *, params); \
    HookWrapper4(void, glFramebufferSampleLocationsfvNV, GLenum, target, GLuint, start, GLsizei, count, const GLfloat *, v); \
    HookWrapper4(void, glNamedFramebufferSampleLocationsfvNV, GLuint, framebuffer, GLuint, start, GLsizei, count, const GLfloat *, v); \
    HookWrapper0(void, glResolveDepthValuesNV); \
    HookWrapper5(void, glViewportSwizzleNV, GLuint, index, GLenum, swizzlex, GLenum, swizzley, GLenum, swizzlez, GLenum, swizzlew); \
    HookWrapper6(void, glFramebufferTextureMultiviewOVR, GLenum, target, GLenum, attachment, GLuint, texture, GLint, level, GLint, baseViewIndex, GLsizei, numViews); \
    HookWrapper7(void, glFramebufferTextureMultisampleMultiviewOVR, GLenum, target, GLenum, attachment, GLuint, texture, GLint, level, GLsizei, samples, GLint, baseViewIndex, GLsizei, numViews); \
    HookWrapper2(void, glAlphaFuncQCOM, GLenum, func, GLclampf, ref); \
    HookWrapper3(void, glGetDriverControlsQCOM, GLint *, num, GLsizei, size, GLuint *, driverControls); \
    HookWrapper4(void, glGetDriverControlStringQCOM, GLuint, driverControl, GLsizei, bufSize, GLsizei *, length, GLchar *, driverControlString); \
    HookWrapper1(void, glEnableDriverControlQCOM, GLuint, driverControl); \
    HookWrapper1(void, glDisableDriverControlQCOM, GLuint, driverControl); \
    HookWrapper3(void, glExtGetTexturesQCOM, GLuint *, textures, GLint, maxTextures, GLint *, numTextures); \
    HookWrapper3(void, glExtGetBuffersQCOM, GLuint *, buffers, GLint, maxBuffers, GLint *, numBuffers); \
    HookWrapper3(void, glExtGetRenderbuffersQCOM, GLuint *, renderbuffers, GLint, maxRenderbuffers, GLint *, numRenderbuffers); \
    HookWrapper3(void, glExtGetFramebuffersQCOM, GLuint *, framebuffers, GLint, maxFramebuffers, GLint *, numFramebuffers); \
    HookWrapper5(void, glExtGetTexLevelParameterivQCOM, GLuint, texture, GLenum, face, GLint, level, GLenum, pname, GLint *, params); \
    HookWrapper3(void, glExtTexObjectStateOverrideiQCOM, GLenum, target, GLenum, pname, GLint, param); \
    HookWrapper11(void, glExtGetTexSubImageQCOM, GLenum, target, GLint, level, GLint, xoffset, GLint, yoffset, GLint, zoffset, GLsizei, width, GLsizei, height, GLsizei, depth, GLenum, format, GLenum, type, void *, texels); \
    HookWrapper2(void, glExtGetBufferPointervQCOM, GLenum, target, void **, params); \
    HookWrapper3(void, glExtGetShadersQCOM, GLuint *, shaders, GLint, maxShaders, GLint *, numShaders); \
    HookWrapper3(void, glExtGetProgramsQCOM, GLuint *, programs, GLint, maxPrograms, GLint *, numPrograms); \
    HookWrapper1(GLboolean, glExtIsProgramBinaryQCOM, GLuint, program); \
    HookWrapper4(void, glExtGetProgramBinarySourceQCOM, GLuint, program, GLenum, shadertype, GLchar *, source, GLint *, length); \
    HookWrapper5(void, glStartTilingQCOM, GLuint, x, GLuint, y, GLuint, width, GLuint, height, GLbitfield, preserveMask); \
    HookWrapper1(void, glEndTilingQCOM, GLbitfield, preserveMask); \



#define CheckUnsupported() \
    HandleUnsupported(PFNGLEGLIMAGETARGETTEXTURE2DOESPROC, glEGLImageTargetTexture2DOES); \
    HandleUnsupported(PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC, glEGLImageTargetRenderbufferStorageOES); \
    HandleUnsupported(PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC, glMultiDrawElementsBaseVertexOES); \
    HandleUnsupported(PFNGLTEXTUREVIEWOESPROC, glTextureViewOES); \
    HandleUnsupported(PFNGLGETPERFMONITORGROUPSAMDPROC, glGetPerfMonitorGroupsAMD); \
    HandleUnsupported(PFNGLGETPERFMONITORCOUNTERSAMDPROC, glGetPerfMonitorCountersAMD); \
    HandleUnsupported(PFNGLGETPERFMONITORGROUPSTRINGAMDPROC, glGetPerfMonitorGroupStringAMD); \
    HandleUnsupported(PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC, glGetPerfMonitorCounterStringAMD); \
    HandleUnsupported(PFNGLGETPERFMONITORCOUNTERINFOAMDPROC, glGetPerfMonitorCounterInfoAMD); \
    HandleUnsupported(PFNGLGENPERFMONITORSAMDPROC, glGenPerfMonitorsAMD); \
    HandleUnsupported(PFNGLDELETEPERFMONITORSAMDPROC, glDeletePerfMonitorsAMD); \
    HandleUnsupported(PFNGLSELECTPERFMONITORCOUNTERSAMDPROC, glSelectPerfMonitorCountersAMD); \
    HandleUnsupported(PFNGLBEGINPERFMONITORAMDPROC, glBeginPerfMonitorAMD); \
    HandleUnsupported(PFNGLENDPERFMONITORAMDPROC, glEndPerfMonitorAMD); \
    HandleUnsupported(PFNGLGETPERFMONITORCOUNTERDATAAMDPROC, glGetPerfMonitorCounterDataAMD); \
    HandleUnsupported(PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC, glGetTranslatedShaderSourceANGLE); \
    HandleUnsupported(PFNGLCOPYTEXTURELEVELSAPPLEPROC, glCopyTextureLevelsAPPLE); \
    HandleUnsupported(PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC, glResolveMultisampleFramebufferAPPLE); \
    HandleUnsupported(PFNGLCLEARTEXIMAGEEXTPROC, glClearTexImageEXT); \
    HandleUnsupported(PFNGLCLEARTEXSUBIMAGEEXTPROC, glClearTexSubImageEXT); \
    HandleUnsupported(PFNGLDISCARDFRAMEBUFFEREXTPROC, glDiscardFramebufferEXT); \
    HandleUnsupported(PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC, glMultiDrawElementsBaseVertexEXT); \
    HandleUnsupported(PFNGLDRAWTRANSFORMFEEDBACKEXTPROC, glDrawTransformFeedbackEXT); \
    HandleUnsupported(PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC, glDrawTransformFeedbackInstancedEXT); \
    HandleUnsupported(PFNGLMULTIDRAWARRAYSEXTPROC, glMultiDrawArraysEXT); \
    HandleUnsupported(PFNGLMULTIDRAWELEMENTSEXTPROC, glMultiDrawElementsEXT); \
    HandleUnsupported(PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC, glMultiDrawArraysIndirectEXT); \
    HandleUnsupported(PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC, glMultiDrawElementsIndirectEXT); \
    HandleUnsupported(PFNGLREADBUFFERINDEXEDEXTPROC, glReadBufferIndexedEXT); \
    HandleUnsupported(PFNGLDRAWBUFFERSINDEXEDEXTPROC, glDrawBuffersIndexedEXT); \
    HandleUnsupported(PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC, glFramebufferPixelLocalStorageSizeEXT); \
    HandleUnsupported(PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC, glGetFramebufferPixelLocalStorageSizeEXT); \
    HandleUnsupported(PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC, glClearPixelLocalStorageuiEXT); \
    HandleUnsupported(PFNGLTEXPAGECOMMITMENTEXTPROC, glTexPageCommitmentEXT); \
    HandleUnsupported(PFNGLWINDOWRECTANGLESEXTPROC, glWindowRectanglesEXT); \
    HandleUnsupported(PFNGLGETTEXTUREHANDLEIMGPROC, glGetTextureHandleIMG); \
    HandleUnsupported(PFNGLGETTEXTURESAMPLERHANDLEIMGPROC, glGetTextureSamplerHandleIMG); \
    HandleUnsupported(PFNGLUNIFORMHANDLEUI64IMGPROC, glUniformHandleui64IMG); \
    HandleUnsupported(PFNGLUNIFORMHANDLEUI64VIMGPROC, glUniformHandleui64vIMG); \
    HandleUnsupported(PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC, glProgramUniformHandleui64IMG); \
    HandleUnsupported(PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC, glProgramUniformHandleui64vIMG); \
    HandleUnsupported(PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC, glFramebufferTexture2DDownsampleIMG); \
    HandleUnsupported(PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC, glFramebufferTextureLayerDownsampleIMG); \
    HandleUnsupported(PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC, glApplyFramebufferAttachmentCMAAINTEL); \
    HandleUnsupported(PFNGLBEGINPERFQUERYINTELPROC, glBeginPerfQueryINTEL); \
    HandleUnsupported(PFNGLCREATEPERFQUERYINTELPROC, glCreatePerfQueryINTEL); \
    HandleUnsupported(PFNGLDELETEPERFQUERYINTELPROC, glDeletePerfQueryINTEL); \
    HandleUnsupported(PFNGLENDPERFQUERYINTELPROC, glEndPerfQueryINTEL); \
    HandleUnsupported(PFNGLGETFIRSTPERFQUERYIDINTELPROC, glGetFirstPerfQueryIdINTEL); \
    HandleUnsupported(PFNGLGETNEXTPERFQUERYIDINTELPROC, glGetNextPerfQueryIdINTEL); \
    HandleUnsupported(PFNGLGETPERFCOUNTERINFOINTELPROC, glGetPerfCounterInfoINTEL); \
    HandleUnsupported(PFNGLGETPERFQUERYDATAINTELPROC, glGetPerfQueryDataINTEL); \
    HandleUnsupported(PFNGLGETPERFQUERYIDBYNAMEINTELPROC, glGetPerfQueryIdByNameINTEL); \
    HandleUnsupported(PFNGLGETPERFQUERYINFOINTELPROC, glGetPerfQueryInfoINTEL); \
    HandleUnsupported(PFNGLGETTEXTUREHANDLENVPROC, glGetTextureHandleNV); \
    HandleUnsupported(PFNGLGETTEXTURESAMPLERHANDLENVPROC, glGetTextureSamplerHandleNV); \
    HandleUnsupported(PFNGLMAKETEXTUREHANDLERESIDENTNVPROC, glMakeTextureHandleResidentNV); \
    HandleUnsupported(PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC, glMakeTextureHandleNonResidentNV); \
    HandleUnsupported(PFNGLGETIMAGEHANDLENVPROC, glGetImageHandleNV); \
    HandleUnsupported(PFNGLMAKEIMAGEHANDLERESIDENTNVPROC, glMakeImageHandleResidentNV); \
    HandleUnsupported(PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC, glMakeImageHandleNonResidentNV); \
    HandleUnsupported(PFNGLUNIFORMHANDLEUI64NVPROC, glUniformHandleui64NV); \
    HandleUnsupported(PFNGLUNIFORMHANDLEUI64VNVPROC, glUniformHandleui64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC, glProgramUniformHandleui64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC, glProgramUniformHandleui64vNV); \
    HandleUnsupported(PFNGLISTEXTUREHANDLERESIDENTNVPROC, glIsTextureHandleResidentNV); \
    HandleUnsupported(PFNGLISIMAGEHANDLERESIDENTNVPROC, glIsImageHandleResidentNV); \
    HandleUnsupported(PFNGLBLENDPARAMETERINVPROC, glBlendParameteriNV); \
    HandleUnsupported(PFNGLSUBPIXELPRECISIONBIASNVPROC, glSubpixelPrecisionBiasNV); \
    HandleUnsupported(PFNGLCONSERVATIVERASTERPARAMETERINVPROC, glConservativeRasterParameteriNV); \
    HandleUnsupported(PFNGLCOVERAGEMASKNVPROC, glCoverageMaskNV); \
    HandleUnsupported(PFNGLCOVERAGEOPERATIONNVPROC, glCoverageOperationNV); \
    HandleUnsupported(PFNGLDELETEFENCESNVPROC, glDeleteFencesNV); \
    HandleUnsupported(PFNGLGENFENCESNVPROC, glGenFencesNV); \
    HandleUnsupported(PFNGLISFENCENVPROC, glIsFenceNV); \
    HandleUnsupported(PFNGLTESTFENCENVPROC, glTestFenceNV); \
    HandleUnsupported(PFNGLGETFENCEIVNVPROC, glGetFenceivNV); \
    HandleUnsupported(PFNGLFINISHFENCENVPROC, glFinishFenceNV); \
    HandleUnsupported(PFNGLSETFENCENVPROC, glSetFenceNV); \
    HandleUnsupported(PFNGLFRAGMENTCOVERAGECOLORNVPROC, glFragmentCoverageColorNV); \
    HandleUnsupported(PFNGLCOVERAGEMODULATIONTABLENVPROC, glCoverageModulationTableNV); \
    HandleUnsupported(PFNGLGETCOVERAGEMODULATIONTABLENVPROC, glGetCoverageModulationTableNV); \
    HandleUnsupported(PFNGLCOVERAGEMODULATIONNVPROC, glCoverageModulationNV); \
    HandleUnsupported(PFNGLUNIFORM1I64NVPROC, glUniform1i64NV); \
    HandleUnsupported(PFNGLUNIFORM2I64NVPROC, glUniform2i64NV); \
    HandleUnsupported(PFNGLUNIFORM3I64NVPROC, glUniform3i64NV); \
    HandleUnsupported(PFNGLUNIFORM4I64NVPROC, glUniform4i64NV); \
    HandleUnsupported(PFNGLUNIFORM1I64VNVPROC, glUniform1i64vNV); \
    HandleUnsupported(PFNGLUNIFORM2I64VNVPROC, glUniform2i64vNV); \
    HandleUnsupported(PFNGLUNIFORM3I64VNVPROC, glUniform3i64vNV); \
    HandleUnsupported(PFNGLUNIFORM4I64VNVPROC, glUniform4i64vNV); \
    HandleUnsupported(PFNGLUNIFORM1UI64NVPROC, glUniform1ui64NV); \
    HandleUnsupported(PFNGLUNIFORM2UI64NVPROC, glUniform2ui64NV); \
    HandleUnsupported(PFNGLUNIFORM3UI64NVPROC, glUniform3ui64NV); \
    HandleUnsupported(PFNGLUNIFORM4UI64NVPROC, glUniform4ui64NV); \
    HandleUnsupported(PFNGLUNIFORM1UI64VNVPROC, glUniform1ui64vNV); \
    HandleUnsupported(PFNGLUNIFORM2UI64VNVPROC, glUniform2ui64vNV); \
    HandleUnsupported(PFNGLUNIFORM3UI64VNVPROC, glUniform3ui64vNV); \
    HandleUnsupported(PFNGLUNIFORM4UI64VNVPROC, glUniform4ui64vNV); \
    HandleUnsupported(PFNGLGETUNIFORMI64VNVPROC, glGetUniformi64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM1I64NVPROC, glProgramUniform1i64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM2I64NVPROC, glProgramUniform2i64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM3I64NVPROC, glProgramUniform3i64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM4I64NVPROC, glProgramUniform4i64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM1I64VNVPROC, glProgramUniform1i64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM2I64VNVPROC, glProgramUniform2i64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM3I64VNVPROC, glProgramUniform3i64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM4I64VNVPROC, glProgramUniform4i64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM1UI64NVPROC, glProgramUniform1ui64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM2UI64NVPROC, glProgramUniform2ui64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM3UI64NVPROC, glProgramUniform3ui64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM4UI64NVPROC, glProgramUniform4ui64NV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM1UI64VNVPROC, glProgramUniform1ui64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM2UI64VNVPROC, glProgramUniform2ui64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM3UI64VNVPROC, glProgramUniform3ui64vNV); \
    HandleUnsupported(PFNGLPROGRAMUNIFORM4UI64VNVPROC, glProgramUniform4ui64vNV); \
    HandleUnsupported(PFNGLGETINTERNALFORMATSAMPLEIVNVPROC, glGetInternalformatSampleivNV); \
    HandleUnsupported(PFNGLGENPATHSNVPROC, glGenPathsNV); \
    HandleUnsupported(PFNGLDELETEPATHSNVPROC, glDeletePathsNV); \
    HandleUnsupported(PFNGLISPATHNVPROC, glIsPathNV); \
    HandleUnsupported(PFNGLPATHCOMMANDSNVPROC, glPathCommandsNV); \
    HandleUnsupported(PFNGLPATHCOORDSNVPROC, glPathCoordsNV); \
    HandleUnsupported(PFNGLPATHSUBCOMMANDSNVPROC, glPathSubCommandsNV); \
    HandleUnsupported(PFNGLPATHSUBCOORDSNVPROC, glPathSubCoordsNV); \
    HandleUnsupported(PFNGLPATHSTRINGNVPROC, glPathStringNV); \
    HandleUnsupported(PFNGLPATHGLYPHSNVPROC, glPathGlyphsNV); \
    HandleUnsupported(PFNGLPATHGLYPHRANGENVPROC, glPathGlyphRangeNV); \
    HandleUnsupported(PFNGLWEIGHTPATHSNVPROC, glWeightPathsNV); \
    HandleUnsupported(PFNGLCOPYPATHNVPROC, glCopyPathNV); \
    HandleUnsupported(PFNGLINTERPOLATEPATHSNVPROC, glInterpolatePathsNV); \
    HandleUnsupported(PFNGLTRANSFORMPATHNVPROC, glTransformPathNV); \
    HandleUnsupported(PFNGLPATHPARAMETERIVNVPROC, glPathParameterivNV); \
    HandleUnsupported(PFNGLPATHPARAMETERINVPROC, glPathParameteriNV); \
    HandleUnsupported(PFNGLPATHPARAMETERFVNVPROC, glPathParameterfvNV); \
    HandleUnsupported(PFNGLPATHPARAMETERFNVPROC, glPathParameterfNV); \
    HandleUnsupported(PFNGLPATHDASHARRAYNVPROC, glPathDashArrayNV); \
    HandleUnsupported(PFNGLPATHSTENCILFUNCNVPROC, glPathStencilFuncNV); \
    HandleUnsupported(PFNGLPATHSTENCILDEPTHOFFSETNVPROC, glPathStencilDepthOffsetNV); \
    HandleUnsupported(PFNGLSTENCILFILLPATHNVPROC, glStencilFillPathNV); \
    HandleUnsupported(PFNGLSTENCILSTROKEPATHNVPROC, glStencilStrokePathNV); \
    HandleUnsupported(PFNGLSTENCILFILLPATHINSTANCEDNVPROC, glStencilFillPathInstancedNV); \
    HandleUnsupported(PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC, glStencilStrokePathInstancedNV); \
    HandleUnsupported(PFNGLPATHCOVERDEPTHFUNCNVPROC, glPathCoverDepthFuncNV); \
    HandleUnsupported(PFNGLCOVERFILLPATHNVPROC, glCoverFillPathNV); \
    HandleUnsupported(PFNGLCOVERSTROKEPATHNVPROC, glCoverStrokePathNV); \
    HandleUnsupported(PFNGLCOVERFILLPATHINSTANCEDNVPROC, glCoverFillPathInstancedNV); \
    HandleUnsupported(PFNGLCOVERSTROKEPATHINSTANCEDNVPROC, glCoverStrokePathInstancedNV); \
    HandleUnsupported(PFNGLGETPATHPARAMETERIVNVPROC, glGetPathParameterivNV); \
    HandleUnsupported(PFNGLGETPATHPARAMETERFVNVPROC, glGetPathParameterfvNV); \
    HandleUnsupported(PFNGLGETPATHCOMMANDSNVPROC, glGetPathCommandsNV); \
    HandleUnsupported(PFNGLGETPATHCOORDSNVPROC, glGetPathCoordsNV); \
    HandleUnsupported(PFNGLGETPATHDASHARRAYNVPROC, glGetPathDashArrayNV); \
    HandleUnsupported(PFNGLGETPATHMETRICSNVPROC, glGetPathMetricsNV); \
    HandleUnsupported(PFNGLGETPATHMETRICRANGENVPROC, glGetPathMetricRangeNV); \
    HandleUnsupported(PFNGLGETPATHSPACINGNVPROC, glGetPathSpacingNV); \
    HandleUnsupported(PFNGLISPOINTINFILLPATHNVPROC, glIsPointInFillPathNV); \
    HandleUnsupported(PFNGLISPOINTINSTROKEPATHNVPROC, glIsPointInStrokePathNV); \
    HandleUnsupported(PFNGLGETPATHLENGTHNVPROC, glGetPathLengthNV); \
    HandleUnsupported(PFNGLPOINTALONGPATHNVPROC, glPointAlongPathNV); \
    HandleUnsupported(PFNGLMATRIXLOAD3X2FNVPROC, glMatrixLoad3x2fNV); \
    HandleUnsupported(PFNGLMATRIXLOAD3X3FNVPROC, glMatrixLoad3x3fNV); \
    HandleUnsupported(PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC, glMatrixLoadTranspose3x3fNV); \
    HandleUnsupported(PFNGLMATRIXMULT3X2FNVPROC, glMatrixMult3x2fNV); \
    HandleUnsupported(PFNGLMATRIXMULT3X3FNVPROC, glMatrixMult3x3fNV); \
    HandleUnsupported(PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC, glMatrixMultTranspose3x3fNV); \
    HandleUnsupported(PFNGLSTENCILTHENCOVERFILLPATHNVPROC, glStencilThenCoverFillPathNV); \
    HandleUnsupported(PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC, glStencilThenCoverStrokePathNV); \
    HandleUnsupported(PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC, glStencilThenCoverFillPathInstancedNV); \
    HandleUnsupported(PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC, glStencilThenCoverStrokePathInstancedNV); \
    HandleUnsupported(PFNGLPATHGLYPHINDEXRANGENVPROC, glPathGlyphIndexRangeNV); \
    HandleUnsupported(PFNGLPATHGLYPHINDEXARRAYNVPROC, glPathGlyphIndexArrayNV); \
    HandleUnsupported(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC, glPathMemoryGlyphIndexArrayNV); \
    HandleUnsupported(PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC, glProgramPathFragmentInputGenNV); \
    HandleUnsupported(PFNGLGETPROGRAMRESOURCEFVNVPROC, glGetProgramResourcefvNV); \
    HandleUnsupported(PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC, glFramebufferSampleLocationsfvNV); \
    HandleUnsupported(PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC, glNamedFramebufferSampleLocationsfvNV); \
    HandleUnsupported(PFNGLRESOLVEDEPTHVALUESNVPROC, glResolveDepthValuesNV); \
    HandleUnsupported(PFNGLVIEWPORTSWIZZLENVPROC, glViewportSwizzleNV); \
    HandleUnsupported(PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC, glFramebufferTextureMultiviewOVR); \
    HandleUnsupported(PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC, glFramebufferTextureMultisampleMultiviewOVR); \
    HandleUnsupported(PFNGLALPHAFUNCQCOMPROC, glAlphaFuncQCOM); \
    HandleUnsupported(PFNGLGETDRIVERCONTROLSQCOMPROC, glGetDriverControlsQCOM); \
    HandleUnsupported(PFNGLGETDRIVERCONTROLSTRINGQCOMPROC, glGetDriverControlStringQCOM); \
    HandleUnsupported(PFNGLENABLEDRIVERCONTROLQCOMPROC, glEnableDriverControlQCOM); \
    HandleUnsupported(PFNGLDISABLEDRIVERCONTROLQCOMPROC, glDisableDriverControlQCOM); \
    HandleUnsupported(PFNGLEXTGETTEXTURESQCOMPROC, glExtGetTexturesQCOM); \
    HandleUnsupported(PFNGLEXTGETBUFFERSQCOMPROC, glExtGetBuffersQCOM); \
    HandleUnsupported(PFNGLEXTGETRENDERBUFFERSQCOMPROC, glExtGetRenderbuffersQCOM); \
    HandleUnsupported(PFNGLEXTGETFRAMEBUFFERSQCOMPROC, glExtGetFramebuffersQCOM); \
    HandleUnsupported(PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC, glExtGetTexLevelParameterivQCOM); \
    HandleUnsupported(PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC, glExtTexObjectStateOverrideiQCOM); \
    HandleUnsupported(PFNGLEXTGETTEXSUBIMAGEQCOMPROC, glExtGetTexSubImageQCOM); \
    HandleUnsupported(PFNGLEXTGETBUFFERPOINTERVQCOMPROC, glExtGetBufferPointervQCOM); \
    HandleUnsupported(PFNGLEXTGETSHADERSQCOMPROC, glExtGetShadersQCOM); \
    HandleUnsupported(PFNGLEXTGETPROGRAMSQCOMPROC, glExtGetProgramsQCOM); \
    HandleUnsupported(PFNGLEXTISPROGRAMBINARYQCOMPROC, glExtIsProgramBinaryQCOM); \
    HandleUnsupported(PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC, glExtGetProgramBinarySourceQCOM); \
    HandleUnsupported(PFNGLSTARTTILINGQCOMPROC, glStartTilingQCOM); \
    HandleUnsupported(PFNGLENDTILINGQCOMPROC, glEndTilingQCOM); \




