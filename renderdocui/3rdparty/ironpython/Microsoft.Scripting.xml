<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Scripting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Scripting.Hosting.DocumentationOperations">
            <summary>
            Provides documentation against live objects for use in a REPL window.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetMembers(System.Object)">
            <summary>
            Gets the available members defined on the provided object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetOverloads(System.Object)">
            <summary>
            Gets the overloads available for the provided object if it is invokable.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetMembers(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Gets the available members on the provided remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetOverloads(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Gets the overloads available for the provided remote object if it is invokable.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.MemberDoc">
            <summary>
            Provides documentation about a member in a live object.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.MemberDoc.Name">
            <summary>
            The name of the member
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.MemberDoc.Kind">
            <summary>
            The kind of the member if it's known.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.MemberKind">
            <summary>
            Specifies the type of member.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.OverloadDoc">
            <summary>
            Provides documentation for a single overload of an invokable object.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Name">
            <summary>
            The name of the invokable object.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Documentation">
            <summary>
            The documentation for the overload or null if no documentation is available.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Parameters">
            <summary>
            The parameters for the invokable object.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.ReturnParameter">
            <summary>
            Information about the return value.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ParameterDoc">
            <summary>
            Provides documentation for a single parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.TypeName">
            <summary>
            The type name of the parameter or null if no type information is available.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Flags">
            <summary>
            Provides addition information about the parameter such as if it's a parameter array.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Documentation">
            <summary>
            Gets the documentation string for this parameter or null if no documentation is available.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ParameterFlags">
            <summary>
            Indications extra information about a parameter such as if it's a parameter array.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.IndexSpan">
            <summary>
            This structure represents an immutable integer interval that describes a range of values, from Start to End. 
            
            It is closed on the left and open on the right: [Start .. End). 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ObjectDictionaryExpando">
            <summary>
            Wraps a an IDictionary[object, object] and exposes it as an IDynamicMetaObjectProvider so that
            users can access string attributes using member accesses.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DocumentationProvider">
            <summary>
            Provides language specific documentation for live objects.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicStackFrame">
            <summary>
            Helper for storing information about stack frames.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.StringDictionaryExpando">
            <summary>
            Exposes a IDictionary[string, object] as a dynamic object.  Gets/sets/deletes turn
            into accesses on the underlying dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.CompilerOptions">
            <summary>
            Class that represents compiler options.
            Note that this class is likely to change when hosting API becomes part of .Net
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorSink.Add(System.String,System.String,System.String,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>
            This overload will be called when a SourceUnit is not available. This can happen if the code is being executed remotely,
            since SourceUnit cannot be marshaled across AppDomains.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.CompiledCode">
            <summary>
            Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.CompiledCode.ScriptCode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute">
            <summary>
            Executes code in a default scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Execute code within a given scope and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute``1">
            <summary>
            Executes code in in a default scope and converts to a given type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute``1(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Execute code within a given scope and converts result to a given type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes the code in the specified scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API to handle non-serializable exceptions (exceptions might not be serializable due to security restrictions) 
            or if an exception serialization loses information.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the expression in the specified scope and return a result.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API to handle non-serializable exceptions (exceptions might not be serializable due to security restrictions) 
            or if an exception serialization loses information.
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.Engine">
            <summary>
            Engine that compiled this code.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.DefaultScope">
            <summary>
            Default scope for this code.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListener">
            <summary>
            The host can use this class to track for errors reported during script parsing and compilation.
            Hosting API counterpart for <see cref="T:Microsoft.Scripting.ErrorSink"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListenerProxySink">
            <summary>
            Bridges ErrorSink and ErrorListener. 
            Errors reported by language compilers to ErrorSink are forwarded to the ErrorListener provided by the host.
            </summary>
            <remarks>
            This proxy is created in the scenario when the compiler is processing a single SourceUnit.
            Therefore it could maintain one to one mapping from SourceUnit to ScriptSource.
            In a case, which shouldn't happen, that the compiler reports an error in a different SourceUnit we just create 
            a new instance of the ScriptSource each time. 
            
            TODO: Consider compilation of multiple source units and creating a hashtable mapping SourceUnits to ScriptSources
            within the context of compilation unit.
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorSinkProxyListener">
            <summary>
            Bridges ErrorListener and ErrorSink. It provides the reverse functionality as ErrorSinkProxyListener
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.LanguageSetup">
            <summary>
            Stores information needed to setup a language
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String)">
            <summary>
            Creates a new LanguageSetup
            </summary>
            <param name="typeName">assembly qualified type name of the language
            provider</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String,System.String)">
            <summary>
            Creates a new LanguageSetup with the provided options
            TODO: remove this overload?
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new LanguageSetup with the provided options
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.GetOption``1(System.String,``0)">
            <summary>
            Gets an option as a strongly typed value.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.TypeName">
            <summary>
            The assembly qualified type name of the language provider
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.DisplayName">
            <summary>
            Display name of the language. If empty, it will be set to the first
            name in the Names list.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.Names">
            <remarks>
            Case-insensitive language names.
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.FileExtensions">
            <remarks>
            Case-insensitive file extension, optionally starts with a dot.
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.Options">
            <remarks>
            Option names are case-sensitive.
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ObjectOperations">
            <summary>
            ObjectOperations provide a large catalogue of object operations such as member access, conversions, 
            indexing, and things like addition.  There are several introspection and tool support services available
            for more advanced hosts.  
            
            You get ObjectOperation instances from ScriptEngine, and they are bound to their engines for the semantics 
            of the operations.  There is a default instance of ObjectOperations you can share across all uses of the 
            engine.  However, very advanced hosts can create new instances.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Object)">
            <summary>
            Returns true if the object can be called, false if it cannot.  
            
            Even if an object is callable Call may still fail if an incorrect number of arguments or type of arguments are provided.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the provided object with the given parameters and returns the result.
            
            The prefered way of calling objects is to convert the object to a strongly typed delegate 
            using the ConvertTo methods and then invoking that delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.InvokeMember(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a member on the provided object with the given parameters and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Object,System.Object[])">
            <summary>
            Creates a new instance from the provided object using the given parameters, and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj and converts it to the type T.  Throws an exception if the
            member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Object,System.String)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Object,System.String)">
            <summary>
            Removes the member name from the object obj.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the member name from the object obj and converts it to the type T.  Throws an exception if the
            member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Object,System.String,System.Boolean,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Object,System.String,System.Boolean)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Object,System.String,System.Boolean)">
            <summary>
            Removes the member name from the object obj.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Object,System.String,``0,System.Boolean)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo``1(System.Object)">
            <summary>
            Converts the object obj to the type T.  The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type. The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            
            The conversion will be explicit or implicit depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type.  Returns true if the value can be converted, false if it cannot.
            
            The conversion will be explicit or implicit depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo``1(System.Object)">
            <summary>
            Converts the object obj to the type T including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T including explicit conversions which may lose information.
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.  
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo``1(System.Object)">
            <summary>
            Converts the object obj to the type T including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T including implicit conversions.
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type including implicit conversions.  
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Performs a generic unary operation on the specified target and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``2(System.Linq.Expressions.ExpressionType,``0)">
            <summary>
            Performs a generic unary operation on the strongly typed target and returns the value as the specified type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            Performs the generic binary operation on the specified targets and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``3(System.Linq.Expressions.ExpressionType,``0,``1)">
            <summary>
            Peforms the generic binary operation on the specified strongly typed targets and returns
            the strongly typed result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Object,System.Object)">
            <summary>
            Performs addition on the specified targets and returns the result.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Object,System.Object)">
            <summary>
            Performs subtraction on the specified targets and returns the result.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Object,System.Object)">
            <summary>
            Raises the first object to the power of the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the two objects.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Object,System.Object)">
            <summary>
            Divides the first object by the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulo(System.Object,System.Object)">
            <summary>
            Performs modulus of the 1st object by the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Object,System.Object)">
            <summary>
            Shifts the left object left by the right object.  Throws an exception if the
            operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Object,System.Object)">
            <summary>
            Shifts the left object right by the right object.  Throws an exception if the
            operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Object,System.Object)">
            <summary>
            Performs a bitwise-and of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Object,System.Object)">
            <summary>
            Performs a bitwise-or of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Object,System.Object)">
            <summary>
            Performs a exclusive-or of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is less than the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is greater than the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is less than or equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is greater than or equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is equal to the right object.
            Throws an exception if the comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is not equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCodeRepresentation(System.Object)">
            <summary>
            Returns a string which describes the object as it appears in source code
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Format(System.Object)">
            <summary>
            Returns a string representation of the object in a language specific object display format.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Object)">
            <summary>
            Returns a list of strings which contain the known members of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Object)">
            <summary>
            Returns a string providing documentation for the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Object)">
            <summary>
            Returns a list of signatures applicable for calling the specified object in a form displayable to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns true if the remote object is callable.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle[])">
            <summary>
            Invokes the specified remote object with the specified remote parameters.
            
            Though delegates are preferable for calls they may not always be usable for remote objects.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Runtime.Remoting.ObjectHandle,System.Object[])">
            <summary>
            Invokes the specified remote object with the local parameters which will be serialized
            to the remote app domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle[])">
            <summary>
            Creates a new remote instance from the provided remote object using the given parameters, and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Runtime.Remoting.ObjectHandle,System.Object[])">
            <summary>
            Creates a new remote instance from the provided remote object using the given parameters, and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Sets the remote object as a member on the provided remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Runtime.Remoting.ObjectHandle,System.String,``0)">
            <summary>
            Sets the member name on the remote object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Gets the member name on the remote object.  Throws an exception if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Gets the member name on the remote object.  Throws an exception if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Gets the member name on the remote object.  Returns false if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Tests to see if the member name is defined on the remote object.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Removes the member from the remote object
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Converts the remote object into the specified type returning a handle to
            the new remote object. The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>
            Converts the remote object into the specified type returning a handle to
            the new remote object. The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo``1(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the remote object into the specified type returning a handle to
            the new remote object. Returns true if the value can be converted,
            false if it cannot. The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the remote object into the specified type returning a handle to
            the new remote object. Returns true if the value can be converted,
            false if it cannot. The conversion will be explicit or implicit depending on 
            what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Converts the object obj to the type T including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo``1(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the object obj to the type T including explicit conversions which may lose information.
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.  
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Converts the object obj to the type T including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>
            Converts the object obj to the type type including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo``1(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the object obj to the type T including implicit conversions.
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Converts the object obj to the type type including implicit conversions.  
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Unwrap``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Unwraps the remote object and converts it into the specified type before
            returning it.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs the specified unary operator on the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs the specified binary operator on the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Adds the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Subtracts the 1st remote object from the second.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Raises the 1st remote object to the power of the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Multiplies the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Divides the 1st remote object by the 2nd. Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulo(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs modulus on the 1st remote object by the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>        
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Shifts the 1st remote object left by the 2nd remote object.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Shifts the 1st remote  object right by the 2nd remote object.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs bitwise-and on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs bitwise-or on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs exclusive-or on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is less than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is greater than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is less than or equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is greater than or equal to than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is not equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Format(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a string representation of the object in a langauge specific object display format.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a list of strings which contain the known members of the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a string providing documentation for the specified remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a list of signatures applicable for calling the specified object in a form displayable to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetLocalObject(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Helper to unwrap an object - in the future maybe we should validate the current app domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetLocalObjects(System.Runtime.Remoting.ObjectHandle[])">
            <summary>
            Helper to unwrap multiple objects
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.GetStringCollectionOption(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Char[])">
            <summary>
            Reads an option whose value is expected to be a collection of non-null strings.
            Reaturns a read-only copy of the option's value.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.NoAdaptiveCompilation">
            <summary>
            Dynamically choose between interpreting, simple compilation and compilation
            that takes advantage of runtime history.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.CompilationThreshold">
            <summary>
            The number of iterations before the interpreter starts compiling.s
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.ExceptionDetail">
            <summary>
             Display exception detail (callstack) when exception gets caught
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.PerfStats">
            <summary>
            Whether to gather performance statistics.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.SearchPaths">
            <summary>
            Initial file search paths provided by the host.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.PlatformAdaptationLayer">
            <summary>
            Abstracts system operations that are used by DLR and could potentially be platform specific.
            The host can implement its PAL to adapt DLR to the platform it is running on.
            For example, the Silverlight host adapts some file operations to work against files on the server.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFullPath(System.String)">
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.IsAbsolutePath(System.String)">
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Providers.HostingHelpers">
            <summary>
            Advanced APIs for HAPI providers. These methods should not be used by hosts. 
            They are provided for other hosting API implementers that would like to leverage existing HAPI and 
            extend it with language specific functionality, for example. 
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetDomainManager(Microsoft.Scripting.Hosting.ScriptRuntime)">
            <exception cref="T:System.ArgumentNullException"><paramref name="runtime"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="runtime"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetLanguageContext(Microsoft.Scripting.Hosting.ScriptEngine)">
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/>e is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="engine"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetSourceUnit(Microsoft.Scripting.Hosting.ScriptSource)">
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptSource"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="scriptSource"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetScriptCode(Microsoft.Scripting.Hosting.CompiledCode)">
            <exception cref="T:System.ArgumentNullException"><paramref name="compiledCode"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="compiledCode"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetSharedIO(Microsoft.Scripting.Hosting.ScriptIO)">
            <exception cref="T:System.ArgumentNullException"><paramref name="io"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="io"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetScope(Microsoft.Scripting.Hosting.ScriptScope)">
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptScope"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="scriptScope"/> is remote.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CreateScriptScope(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Runtime.Scope)">
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="engine"/> is a transparent proxy.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CallEngine``2(Microsoft.Scripting.Hosting.ScriptEngine,System.Func{Microsoft.Scripting.Runtime.LanguageContext,``0,``1},``0)">
            <summary>
            Performs a callback in the ScriptEngine's app domain and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CreateDocumentationOperations(Microsoft.Scripting.Runtime.DocumentationProvider)">
            <summary>
            Creates a new DocumentationOperations object from the given DocumentationProvider.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptEngine">
            <summary>
            Represents a language in Hosting API. 
            Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations">
            <summary>
            Returns a new ObjectOperations object.  See the Operations property for why you might want to call this.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Returns a new ObjectOperations object that inherits any semantics particular to the provided ScriptScope.  
            
            See the Operations property for why you might want to call this.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute(System.String)">
            <summary>
            Executes an expression. The execution is not bound to any particular scope.
            </summary>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes an expression within the specified scope.
            </summary>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute``1(System.String)">
            <summary>
            Executes an expression within a new scope and converts result to the given type.
            </summary>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute``1(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes an expression within the specified scope and converts result to the given type.
            </summary>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteFile(System.String)">
            <summary>
            Executes content of the specified file in a new scope and returns that scope.
            </summary>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteFile(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes content of the specified file against the given scope.
            </summary>
            <returns>The <paramref name="scope"/>.</returns>
            <exception cref="T:System.NotSupportedException">The engine doesn't support code execution.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes the expression in the specified scope and return a result.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String)">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,Microsoft.Scripting.Hosting.ScriptScope,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the expression in the specified scope and return a result.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API in case the exception is not serializable (for example, due to security restrictions) or its serialization 
            loses information that you need to access.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API in case the exception is not serializable (for example, due to security restrictions) or its serialization 
            loses information that you need to access.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScope(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            Creates a new ScriptScope whose storage is an arbitrary object.
            
            Accesses to the ScriptScope will turn into get, set, and delete members against the object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetScope(System.String)">
            <summary>
            This method returns the ScriptScope in which a ScriptSource of given path was executed.  
            
            The ScriptSource.Path property is the key to finding the ScriptScope.  Hosts need 
            to make sure they create a ScriptSource and set its Path property appropriately.
            
            GetScope is primarily useful for tools that need to map files to their execution scopes. For example, 
            an editor and interpreter tool might run a file Foo that imports or requires a file Bar.  
            
            The editor's user might later open the file Bar and want to execute expressions in its context.  
            The tool would need to find Bar's ScriptScope for setting the appropriate context in its interpreter window. 
            This method helps with this scenario.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The default SourceCodeKind is AutoDetect.
            
            The ScriptSource's Path property defaults to <c>null</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The ScriptSource's Path property defaults to <c>null</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The default SourceCodeKind is AutoDetect.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from string contents.  These are helpers for creating ScriptSources' with the right language binding.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The default SourceCodeKind is File.
            
            The ScriptSource's Path property will be the path argument.
            
            The encoding defaults to System.Text.Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The default SourceCodeKind is File.
            
            The ScriptSource's Path property will be the path argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The ScriptSource's Path property will be the path argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The default SourceCodeKind is File.
            
            The encoding defaults to Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The default SourceCodeKind is File.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The encoding defaults to Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.TextContentProvider,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource with the content provider supplied with the current engine as the language binding.
            
            This helper lets you own the content provider so that you can implement a stream over internal host data structures, such as an editor's text representation.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetService``1(System.Object[])">
            <summary>
            This method returns a language-specific service.  
            
            It provides a point of extensibility for a language implementation 
            to offer more functionality than the standard engine members discussed here.
            
            Commonly available services include:
                TokenCategorizer
                    Provides standardized tokenization of source code
                ExceptionOperations
                    Provides formatting of exception objects.
                DocumentationProvidera
                    Provides documentation for live object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.SetSearchPaths(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Sets the search paths used by the engine for loading files when a script wants 
            to import or require another file of code.  
            </summary>
            <exception cref="T:System.NotSupportedException">The language doesn't allow to set search paths.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetSearchPaths">
            <summary>
            Gets the search paths used by the engine for loading files when a script wants 
            to import or require another file of code.  
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Operations">
            <summary>
            Returns a default ObjectOperations for the engine.  
            
            Because an ObjectOperations object caches rules for the types of 
            objects and operations it processes, using the default ObjectOperations for 
            many objects could degrade the caching benefits.  Eventually the cache for 
            some operations could degrade to a point where ObjectOperations stops caching and 
            does a full search for an implementation of the requested operation for the given objects.  
            
            Another reason to create a new ObjectOperations instance is to have it bound
            to the specific view of a ScriptScope.  Languages may attach per-language
            behavior to a ScriptScope which would alter how the operations are performed.
            
            For simple hosting situations, this is sufficient behavior.
            
            
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Setup">
            <summary>
            This property returns readon-only LanguageOptions this engine is using.
            </summary>
            <remarks>
            The values are determined during runtime initialization and read-only afterwards. 
            You can change the settings via a configuration file or explicitly using ScriptRuntimeSetup class.
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Runtime">
            <summary>
            This property returns the ScriptRuntime for the context in which this engine executes.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageVersion">
            <summary>
            This property returns the engine's version as a string.  The format is language-dependent.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHost">
             <summary>
             ScriptHost is collocated with ScriptRuntime in the same app-domain. 
             The host can implement a derived class to consume some notifications and/or 
             customize operations like TryGetSourceUnit,ResolveSourceUnit, etc.
            
             The areguments to the the constructor of the derived class are specified in ScriptRuntimeSetup 
             instance that enters ScriptRuntime initialization.
             
             If the host is remote with respect to DLR (i.e. also with respect to ScriptHost)
             and needs to access objects living in its app-domain it can pass MarshalByRefObject 
             as an argument to its ScriptHost subclass constructor.
             </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.ScriptHost._runtime">
            <summary>
            The runtime the host is attached to.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.RuntimeAttached">
            <summary>
            Invoked after the initialization of the associated Runtime is finished.
            The host can override this method to perform additional initialization of runtime (like loading assemblies etc.).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.EngineCreated(Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>
            Invoked after a new language is loaded into the Runtime.
            The host can override this method to perform additional initialization of language engines.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHostProxy">
            <summary>
            Provides hosting to DLR. Forwards DLR requests to the ScriptHost. 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicRuntimeHostingProvider">
            <summary>
            DLR requires any Hosting API provider to implement this class and provide its instance upon Runtime initialization.
            DLR calls on it to perform basic host/system dependent operations.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicRuntimeHostingProvider.PlatformAdaptationLayer">
            <summary>
            Abstracts system operations that are used by DLR and could potentially be platform specific.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptIO">
            <summary>
            Provides host-redirectable IO streams used by DLR languages for default IO.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Used if the host stores the output as binary data.
            </summary>
            <param name="stream">Binary stream to write data to.</param>
            <param name="encoding">Encoding used to convert textual data written to the output by the script.</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Used if the host handles both kinds of data (textual and binary) by itself.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptRuntime">
            <summary>
            Represents a Dynamic Language Runtime in Hosting API. 
            Hosting API counterpart for <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.#ctor(Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>
            Creates ScriptRuntime in the current app-domain and initialized according to the the specified settings.
            Creates an instance of host class specified in the setup and associates it with the created runtime.
            Both Runtime and ScriptHost are collocated in the current app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateFromConfiguration">
            <summary>
            Creates a new runtime with languages set up according to the current application configuration 
            (using System.Configuration).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateRemote(System.AppDomain,Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>
            Creates ScriptRuntime in the current app-domain and initialized according to the the specified settings.
            Creates an instance of host class specified in the setup and associates it with the created runtime.
            Both Runtime and ScriptHost are collocated in the specified app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngine(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>
            Gets engine for the specified language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineNoLockNoNotification(Microsoft.Scripting.Runtime.LanguageContext,System.Boolean@)">
            <summary>
            Looks up the engine for the specified language. If the engine hasn't been created in this Runtime, it is instantiated here.
            The method doesn't lock nor send notifications to the host.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.ExecuteFile(System.String)">
            <exception cref="T:System.ArgumentException">
            path is empty, contains one or more of the invalid characters defined in GetInvalidPathChars or doesn't have an extension.
            </exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.UseFile(System.String)">
            <exception cref="T:System.ArgumentNullException">path is null</exception>
            <exception cref="T:System.ArgumentException">file extension does not map to language engine</exception>
            <exception cref="T:System.InvalidOperationException">language does not have any search paths</exception>
            <exception cref="T:System.IO.FileNotFoundException">file does exist in language's search path</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            This method walks the assembly's namespaces and name bindings to ScriptRuntime.Globals 
            to represent the types available in the assembly.  Each top-level namespace name gets 
            bound in Globals to a dynamic object representing the namespace.  Within each top-level 
            namespace object, nested namespace names are bound to dynamic objects representing each 
            tier of nested namespaces.  When this method encounters the same namespace-qualified name, 
            it merges names together objects representing the namespaces.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Globals">
            <summary>
            This property returns the "global object" or name bindings of the ScriptRuntime as a ScriptScope.  
            
            You can set the globals scope, which you might do if you created a ScriptScope with an 
            IAttributesCollection so that your host could late bind names.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup">
            <summary>
            Stores information needed to setup a ScriptRuntime
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration">
            <summary>
            Reads setup from .NET configuration system (.config files).
            If there is no configuration available returns an empty setup.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration(System.IO.Stream)">
            <summary>
            Reads setup from a specified XML stream.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration(System.String)">
            <summary>
            Reads setup from a specified XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.LanguageSetups">
            <summary>
            The list of language setup information for languages to load into
            the runtime
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.DebugMode">
            <summary>
            Indicates that the script runtime is in debug mode.
            This means:
            
            1) Symbols are emitted for debuggable methods (methods associated with SourceUnit).
            2) Debuggable methods are emitted to non-collectable types (this is due to CLR limitations on dynamic method debugging).
            3) JIT optimization is disabled for all methods
            4) Languages may disable optimizations based on this value.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.PrivateBinding">
            <summary>
            Ignore CLR visibility checks
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.HostType">
            <summary>
            Can be any derived class of ScriptHost. When set, it allows the
            host to override certain methods to control behavior of the runtime
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.Options">
            <remarks>
            Option names are case-sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.HostArguments">
            <summary>
            Arguments passed to the host type when it is constructed
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptScope">
             <summary>
             A ScriptScope is a unit of execution for code.  It consists of a global Scope which
             all code executes in.  A ScriptScope can have an arbitrary initializer and arbitrary
             reloader. 
             
             ScriptScope is not thread safe. Host should either lock when multiple threads could 
             access the same module or should make a copy for each thread.
            
             Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptScope.Scope"/>.
             </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable(System.String)">
            <summary>
            Gets a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable``1(System.String)">
            <summary>
            Gets a value stored in the scope under the given name.
            Converts the result to the specified type using the conversion that the language associated with the scope defines.
            If no language is associated with the scope, the default CLR conversion is attempted.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariable(System.String,System.Object@)">
            <summary>
            Tries to get a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariable``1(System.String,``0@)">
            <summary>
            Tries to get a value stored in the scope under the given name.
            Converts the result to the specified type using the conversion that the language associated with the scope defines.
            If no language is associated with the scope, the default CLR conversion is attempted.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Object)">
            <summary>
            Sets the name to the specified value.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariableHandle(System.String)">
            <summary>
            Gets a handle for a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariableHandle(System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Tries to get a handle for a value stored in the scope under the given name.
            Returns <c>true</c> if there is such name, <c>false</c> otherwise. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Sets the name to the specified value.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The value held by the handle isn't from the scope's app-domain and isn't serializable or MarshalByRefObject.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="handle"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.ContainsVariable(System.String)">
            <summary>
            Determines if this context or any outer scope contains the defined name.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.RemoveVariable(System.String)">
            <summary>
            Removes the variable of the given name from this scope.
            </summary> 
            <returns><c>true</c> if the value existed in the scope before it has been removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariableNames">
            <summary>
            Gets a list of variable names stored in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetItems">
            <summary>
            Gets an array of variable names and their values stored in the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.Engine">
            <summary>
            Gets an engine for the language associated with this scope.
            Returns invariant engine if the scope is language agnostic.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptSource">
            <summary>
            Hosting counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptSource.SourceUnit"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile">
            <summary>
            Compile the ScriptSource into CompileCode object that can be executed 
            repeatedly in its default scope or in other scopes without having to recompile the code.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.Hosting.ErrorListener)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to errors.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to error(s).
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.Hosting.ErrorListener)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to error(s).
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes the code in the specified scope.
            Returns an object that is the resulting value of running the code.  
            
            When the ScriptSource is a file or statement, the engine decides what is 
            an appropriate value to return.  Some languages return the value produced 
            by the last expression or statement, but languages that are not expression 
            based may return null.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute">
            <summary>
            Executes the source code. The execution is not bound to any particular scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute``1(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes the code in a specified scope and converts the result to the specified type.
            The conversion is language specific.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute``1">
            <summary>
            Executes the code in an empty scope and converts the result to the specified type.
            The conversion is language specific.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Executes the code in the specified scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap(System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the code in an empty scope.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API to handle non-serializable exceptions (exceptions might not be serializable due to security restrictions) 
            or if an exception serialization loses information.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Executes the expression in the specified scope and return a result.
            Returns an ObjectHandle wrapping the resulting value of running the code.  
            
            If an exception is thrown the exception is caught and an ObjectHandle to
            the exception is provided.
            </summary>
            <remarks>
            Use this API to handle non-serializable exceptions (exceptions might not be serializable due to security restrictions) 
            or if an exception serialization loses information.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteProgram">
            <summary>
            Runs a specified code as if it was a program launched from OS command shell. 
            and returns a process exit code indicating the success or error condition 
            of executing the code.
            
            Exact behavior depends on the language. Some languages have a dedicated "exit" exception that 
            carries the exit code, in which case the exception is cought and the exit code is returned.
            The default behavior returns the result of program's execution converted to an integer 
            using a language specific conversion.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.DetectEncoding">
            <summary>
            Detects the encoding of the content.
            </summary>
            <returns>
            An encoding that is used by the reader of the script source to transcode its content to Unicode text.
            <c>Null</c> if the content is already textual and no transcoding is performed.
            </returns>
            <remarks>
            Note that the default encoding specified when the script source is created could be overridden by 
            an encoding that is found in the content preamble (Unicode BOM or a language specific encoding preamble).
            In that case the preamble encoding is returned. Otherwise, the default encoding is returned.
            </remarks>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCodeLines(System.Int32,System.Int32)">
            <summary>
            Reads specified range of lines (or less) from the source unit. 
            </summary>
            <param name="start">1-based number of the first line to fetch.</param>
            <param name="count">The number of lines to fetch.</param>
            <remarks>
            Which character sequences are considered line separators is language specific.
            If language doesn't specify otherwise "\r", "\n", "\r\n" are recognized line separators.
            </remarks>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCodeLine(System.Int32)">
            <summary>
            Reads a specified line.
            </summary>
            <param name="line">1-based line number.</param>
            <returns>Line content. Line separator is not included.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <remarks>
            Which character sequences are considered line separators is language specific.
            If language doesn't specify otherwise "\r", "\n", "\r\n" are recognized line separators.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCode">
            <summary>
            Gets script source content.
            </summary>
            <returns>Entire content.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <remarks>
            The result includes language specific preambles (e.g. "#coding:UTF-8" encoding preamble recognized by Ruby), 
            but not the preamble defined by the content encoding (e.g. BOM).
            The entire content of the source unit is encoded by single encoding (if it is read from binary stream).
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.Path">
            <summary>
            Identification of the source unit. Assigned by the host. 
            The format and semantics is host dependent (could be a path on file system or URL).
            <c>null</c> for anonymous script source.
            Cannot be an empty string.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadToken">
            <summary>
            Move the tokenizer past the next token and return its category.
            </summary>
            <returns>The token information associated with the token just scanned.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipToken">
            <summary>
            Move the tokenizer past the next token.
            </summary>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadTokens(System.Int32)">
            <summary>
            Get all tokens over a block of the stream.
            </summary>
            <remarks>
            <para>
            The scanner should return full tokens. If startLocation + length lands in the middle of a token, the full token
            should be returned.
            </para>
            </remarks>s
            <param name="characterCount">Tokens are read until at least given amount of characters is read or the stream ends.</param>
            <returns>A enumeration of tokens.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipTokens(System.Int32)">
            <summary>
            Scan from startLocation to at least startLocation + length.
            </summary>
            <param name="characterCount">Tokens are read until at least given amount of characters is read or the stream ends.</param>
            <remarks>
            This method is used to determine state at arbitrary startLocation.
            </remarks>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentState">
            <summary>
            The current internal state of the scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentPosition">
            <summary>
            The current startLocation of the scanner.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ContextId">
            <summary>
            Represents a language context.  Typically there is at most 1 context 
            associated with each language, but some languages may use more than one context
            to identify code that should be treated differently.  Contexts are used during
            member and operator lookup.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.RegisterContext(System.Object)">
            <summary>
            Registers a language within the system with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.LookupContext(System.Object)">
            <summary>
            Looks up the context ID for the specified context identifier
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageConfiguration">
            <summary>
            Singleton for each language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageConfiguration.LoadLanguageContext(Microsoft.Scripting.Runtime.ScriptDomainManager,System.Boolean@)">
            <summary>
            Must not be called under a lock as it can potentially call a user code.
            </summary>
            <exception cref="T:Microsoft.Scripting.InvalidImplementationException">The language context's implementation failed to instantiate.</exception>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.DebugMode">
            <summary>
            Whether the application is in debug mode.
            This means:
            
            1) Symbols are emitted for debuggable methods (methods associated with SourceUnit).
            2) Debuggable methods are emitted to non-collectable types (this is due to CLR limitations on dynamic method debugging).
            3) JIT optimization is disabled for all methods
            4) Languages may disable optimizations based on this value.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.PrivateBinding">
            <summary>
            Ignore CLR visibility checks.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations">
            <summary>
            ObjectOperations provide a large catalogue of object operations such as member access, conversions, 
            indexing, and things like addition.  There are several introspection and tool support services available
            for more advanced hosts.  
            
            You get ObjectOperation instances from ScriptEngine, and they are bound to their engines for the semantics 
            of the operations.  There is a default instance of ObjectOperations you can share across all uses of the 
            engine.  However, very advanced hosts can create new instances.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.CleanupThreshold">
            <summary> the number of sites required before we'll try cleaning up the cache... </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.RemoveThreshold">
            <summary> the minimum difference between the average that is required to remove </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.StopCleanupThreshold">
            <summary> the maximum number we'll remove on a single cache cleanup </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.ClearThreshold">
            <summary> the number of sites we should clear after if we can't make progress cleaning up otherwise </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations._sites">
            <summary> a dictionary of SiteKey's which are used to cache frequently used operations, logically a set </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.LastCleanup">
            <summary> the # of sites we had created at the last cleanup </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.SitesCreated">
            <summary> the total number of sites we've ever created </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Invoke(System.Object,System.Object[])">
            <summary>
            Calls the provided object with the given parameters and returns the result.
            
            The prefered way of calling objects is to convert the object to a strongly typed delegate 
            using the ConvertTo methods and then invoking that delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.InvokeMember(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a member on the provided object with the given parameters and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.InvokeMember(System.Object,System.String,System.Boolean,System.Object[])">
            <summary>
            Invokes a member on the provided object with the given parameters and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.CreateInstance(System.Object,System.Object[])">
            <summary>
            Creates a new instance from the provided object using the given parameters, and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember``1(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj and converts it to the type T.  Throws an exception if the
            member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ContainsMember(System.Object,System.String)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.RemoveMember(System.Object,System.String)">
            <summary>
            Removes the member name from the object obj.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember``1(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the member name from the object obj and converts it to the type T. The conversion will be explicit or implicit
            depending on what the langauge prefers. Throws an exception if the member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryGetMember(System.Object,System.String,System.Boolean,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ContainsMember(System.Object,System.String,System.Boolean)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.RemoveMember(System.Object,System.String,System.Boolean)">
            <summary>
            Removes the member name from the object obj.  Returns true if the member was successfully removed
            or false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember``1(System.Object,System.String,``0,System.Boolean)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo``1(System.Object)">
            <summary>
            Converts the object obj to the type T.  The conversion will be explicit or implicit
            depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo(System.Object,System.Type)">
            <summary> 
            Converts the object obj to the type type.  The conversion will be explicit or implicit
            depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            
            The conversion will be explicit or implicit depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type.  Returns true if the value can be converted, false if it cannot.
            
            The conversion will be explicit or implicit depending on what the langauge prefers.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ExplicitConvertTo``1(System.Object)">
            <summary>
            Convers the object obj to the type T including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ExplicitConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryExplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type including explicit conversions which may lose information.  
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryExplicitConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ImplicitConvertTo``1(System.Object)">
            <summary>
            Convers the object obj to the type T including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ImplicitConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type including implicit conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryImplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type including implicit conversions. 
            
            Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryImplicitConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``2(System.Linq.Expressions.ExpressionType,``0)">
            <summary>
            Performs a generic unary operation on the strongly typed target and returns the value as the specified type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``3(System.Linq.Expressions.ExpressionType,``0,``1)">
            <summary>
            Peforms the generic binary operation on the specified strongly typed targets and returns
            the strongly typed result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMemberNames(System.Object)">
            <summary>
            Returns a list of strings which contain the known members of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Format(System.Object)">
            <summary>
            Returns a string representation of the object in a language specific object display format.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``2(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>
            Gets or creates a dynamic site w/ the specified type parameters for the provided binder.
            </summary>
            <remarks>
            This will either get the site from the cache or create a new site and return it. The cache
            may be cleaned if it's gotten too big since the last usage.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateActionSite``1(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>
            Gets or creates a dynamic site w/ the specified type parameters for the provided binder.
            </summary>
            <remarks>
            This will either get the site from the cache or create a new site and return it. The cache
            may be cleaned if it's gotten too big since the last usage.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``3(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>
            Gets or creates a dynamic site w/ the specified type parameters for the provided binder.
            </summary>
            <remarks>
            This will either get the site from the cache or create a new site and return it. The cache
            may be cleaned if it's gotten too big since the last usage.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``4(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>
            Gets or creates a dynamic site w/ the specified type parameters for the provided binder.
            </summary>
            <remarks>
            This will either get the site from the cache or create a new site and return it. The cache
            may be cleaned if it's gotten too big since the last usage.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``1(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>
            Gets or creates a dynamic site w/ the specified type parameters for the provided binder.
            </summary>
            <remarks>
            This will either get the site from the cache or create a new site and return it. The cache
            may be cleaned if it's gotten too big since the last usage.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``1(System.Runtime.CompilerServices.CallSiteBinder,System.Func{System.Runtime.CompilerServices.CallSiteBinder,``0})">
            <summary>
            Helper to create to get or create the dynamic site - called by the GetSite methods.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.CleanupNoLock">
            <summary>
            Removes items from the cache that have the lowest usage...
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations.SiteKey">
            <summary>
            Helper class for tracking all of our unique dynamic sites and their
            usage patterns.  We hash on the combination of the binder and site type.
            
            We also track the hit count and the key holds the site associated w/ the 
            key.  Logically this is a set based upon the binder and site-type but we
            store it in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.InvariantContext">
            <summary>
            Singleton LanguageContext which represents a language-neutral LanguageContext
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageContext">
            <summary>
            Provides language specific facilities which are typically called by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeSetVariable(Microsoft.Scripting.Runtime.Scope,System.String,System.Object)">
            <summary>
            Provides access to setting variables in scopes.  
            
            By default this goes through ObjectOperations which can be rather slow.  
            Languages can override this to provide fast customized access which avoids 
            ObjectOperations.  Languages can provide fast access to commonly used scope 
            types for that language.  Typically this includes ScopeStorage and any other 
            classes which the language themselves uses for backing of a Scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeTryGetVariable(Microsoft.Scripting.Runtime.Scope,System.String,System.Object@)">
            <summary>
            Provides access to try getting variables in scopes.  
            
            By default this goes through ObjectOperations which can be rather slow.  
            Languages can override this to provide fast customized access which avoids 
            ObjectOperations.  Languages can provide fast access to commonly used scope 
            types for that language.  Typically this includes ScopeStorage and any other 
            classes which the language themselves uses for backing of a Scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeGetVariable``1(Microsoft.Scripting.Runtime.Scope,System.String)">
            <summary>
            Provides access to getting variables in scopes and converting the result.
            
            By default this goes through ObjectOperations which can be rather slow.  
            Languages can override this to provide fast customized access which avoids 
            ObjectOperations.  Languages can provide fast access to commonly used scope 
            types for that language.  Typically this includes ScopeStorage and any other 
            classes which the language themselves uses for backing of a Scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeGetVariable(Microsoft.Scripting.Runtime.Scope,System.String)">
            <summary>
            Provides access to getting variables in scopes.
            
            By default this goes through ObjectOperations which can be rather slow.  
            Languages can override this to provide fast customized access which avoids 
            ObjectOperations.  Languages can provide fast access to commonly used scope 
            types for that language.  Typically this includes ScopeStorage and any other 
            classes which the language themselves uses for backing of a Scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetSourceReader(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Provides a text reader for source code that is to be read from a given stream.
            </summary>
            <param name="stream">The stream open for reading. The stream must also allow seeking.</param>
            <param name="defaultEncoding">An encoding that should be used if the stream doesn't have Unicode or language specific preamble.</param>
            <param name="path">the path of the source unit if available</param>
            <returns>The reader.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetCompilerOptions">
            <summary>
            Creates the language specific CompilerOptions object for compilation of code not bound to any particular scope.
            The language should flow any relevant options from LanguageContext to the newly created options instance.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetCompilerOptions(Microsoft.Scripting.Runtime.Scope)">
            <summary>
            Creates the language specific CompilerOptions object for compilation of code bound to a given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CompileSourceCode(Microsoft.Scripting.SourceUnit,Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>
            Parses the source code within a specified compiler context. 
            The source unit to parse is held on by the context.
            </summary>
            <returns><b>null</b> on failure.</returns>
            <remarks>Could also set the code properties and line/file mappings on the source unit.</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateConvertBinder(System.Type,System.Nullable{System.Boolean})">
            <summary>
            Creates a conversion binder.
            
            If explicitCast is true then the binder should do explicit conversions.
            If explicitCast is false then the binder should do implicit conversions.
            
            If explicitCast is null it is up to the language to select the conversions
            which closest match their normal behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetMemberNames(System.Object)">
            <summary>
            Gets the member names associated with the object
            By default, only returns IDO names
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.FormatObject(Microsoft.Scripting.Runtime.DynamicOperations,System.Object)">
            <summary>
            Returns a string representation of the object in a language specific object display format.
            </summary>
            <param name="operations">Dynamic sites container that could be used for any dynamic dispatches necessary for formatting.</param>
            <param name="obj">Object to format.</param>
            <returns>A string representation of object.</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.ContextId">
            <summary>
            Provides the ContextId which includes members that should only be shown for this LanguageContext.
            
            ContextId's are used for filtering by Scope's.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.DomainManager">
            <summary>
            Gets the ScriptDomainManager that this LanguageContext is running within.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.CanCreateSourceCode">
            <summary>
            Whether the language can parse code and create source units.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider">
            <summary>
            Internal class which binds a LanguageContext, StreamContentProvider, and Encoding together to produce
            a TextContentProvider which reads binary data with the correct language semantics.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.TextContentProvider">
            <summary>
            Provides a factory to create TextReader's over one source of textual content.
            
            TextContentProvider's are used when reading from a source which is already decoded
            or has a known specific decoding.  
            
            For example a text editor might provide a TextContentProvider whose backing is
            an in-memory text buffer that the user can actively edit.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.TextContentProvider.GetReader">
            <summary>
            Creates a new TextReader which is backed by the content the TextContentProvider was created for.
            
            This method may be called multiple times.  For example once to compile the code and again to get
            the source code to display error messages.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.NotNullAttribute">
            <summary>
            This attribute marks a parameter that is not allowed to be null.
            It is used by the method binding infrastructure to generate better error 
            messages and method selection.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.NotNullItemsAttribute">
            <summary>
            This attribute marks a parameter whose type is an array that is not allowed to have null items.
            It is used by the method binding infrastructure to generate better error 
            messages and method selection.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ParamDictionaryAttribute">
            <summary>
            This attribute is used to mark a parameter that can accept any keyword parameters that
            are not bound to normal arguments.  The extra keyword parameters will be
            passed in a dictionary which is created for the call.
            
            Most languages which support params dictionaries will support the following types:
                IDictionary&lt;string, anything&gt;
                IDictionary&lt;object, anything&gt;
                Dictionary&lt;string, anything&gt;
                Dictionary&lt;object, anything&gt;
                IDictionary
                IAttributesCollection (deprecated)
            
            For languages which don't have language level support the user will be required to
            create and populate the dictionary by hand.
            
            This attribute is the dictionary equivalent of the System.ParamArrayAttribute.
            </summary>
            <example>
            public static void KeywordArgFunction([ParamsDictionary]IDictionary&lt;string, object&gt; dict) {
                foreach (var v in dict) {
                    Console.WriteLine("Key: {0} Value: {1}", v.Key, v.Value);
                }
            }
            
            Called from Python:
            
            KeywordArgFunction(a = 2, b = "abc")
            
            will print:
                Key: a Value = 2
                Key: b Value = abc
            </example>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Scope">
            <summary>
            Represents a host-provided variables for executable code.  The variables are
            typically backed by a host-provided dictionary. Languages can also associate per-language
            information with the context by using scope extensions.  This can be used for tracking
            state which is used across multiple executions, for providing custom forms of 
            storage (for example object keyed access), or other language specific semantics.
            
            Scope objects are thread-safe as long as their underlying storage is thread safe.
            
            Script hosts can choose to use thread safe or thread unsafe modules but must be sure
            to constrain the code they right to be single-threaded if using thread unsafe
            storage.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.#ctor">
            <summary>
            Creates a new scope with a new empty thread-safe dictionary.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.#ctor(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            Creates a new scope which is backed by an arbitrary object for it's storage.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.GetExtension(Microsoft.Scripting.Runtime.ContextId)">
            <summary>
            Gets the ScopeExtension associated with the provided ContextId.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.SetExtension(Microsoft.Scripting.Runtime.ContextId,Microsoft.Scripting.Runtime.ScopeExtension)">
            <summary>
            Sets the ScopeExtension to the provided value for the given ContextId.  
            
            The extension can only be set once.  The returned value is either the new ScopeExtension
            if no value was previously set or the previous value.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeStorage">
            <summary>
            Provides optimized and cacheable support for scope storage.
            
            This is the default object used for storing values in a scope.
            
            </summary>
            <remarks>
            The implementation uses a case-insensitive dictionary which holds
            onto ScopeVariableIgnoreCase objects.  The SVIC's hold onto ScopeVariable
            objects for each possible casing.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetValue(System.String,System.Boolean)">
            <summary>
            Gets the named value from the scope optionally ignoring case.
            
            If the named value is not present an InvalidOperationException is raised.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.TryGetValue(System.String,System.Boolean,System.Object@)">
            <summary>
            Attempts to get the named value from the scope optionally ignoring the case.
            
            Returns true if the value is present, false if it is not.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.SetValue(System.String,System.Boolean,System.Object)">
            <summary>
            Sets the named value in the scope optionally ignoring the case.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.DeleteValue(System.String,System.Boolean)">
            <summary>
            Deletes the named value from the scope optionally ignoring the case.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.HasValue(System.String,System.Boolean)">
            <summary>
            Checks if the named value is present in the scope optionally ignoring the case.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetScopeVariable(System.String,System.Boolean)">
            <summary>
            Gets the IScopeVariable for the scope optionally ignoring case.
            
            The IScopeVariable can be held onto and get/set/deleted without performing
            a dictionary lookup on subsequent accesses.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetScopeVariable(System.String)">
            <summary>
            Gets the ScopeVariable for the scope in a case-sensitive manner.
            
            The ScopeVariable can be held onto and get/set/deleted without performing
            a dictionary lookup on subsequent accesses.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetScopeVariableIgnoreCase(System.String)">
            <summary>
            Gets the ScopeVariableIgnoreCase for the scope in a case-insensitive manner.
            
            The ScopeVariable can be held onto and get/set/deleted without performing
            a dictionary lookup on subsequent accesses.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetMemberNames">
            <summary>
            Returns all of the member names which currently have values in the scope.
            
            The list contains all available casings.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetItems">
            <summary>
            Returns all of the member names and their associated values from the scope.
            
            The list contains all available casings.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.ScopeStorage.Item(System.String)">
            <summary>
            Provides convenient case-sensitive value access.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.IScopeVariable">
            <summary>
            Provides a common interface for accessing both case sensitive and 
            case insensitive variable storage.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.TryGetValue(System.Object@)">
            <summary>
            Atempts to get the value. If a value is assigned it returns true otherwise
            it returns false.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.SetValue(System.Object)">
            <summary>
            Sets the current value in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.DeleteValue">
            <summary>
            Removes the current value from the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.IScopeVariable.HasValue">
            <summary>
            True if the scope has a value, false if it does not.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeVariable">
            <summary>
            Boxes the value for storage in a scope. Languages or consumers of the scope
            can save this value and use it to get/set the current value in the scope for
            commonly accessed values.
            
            ScopeVariables are case sensitive and will only refer to a single value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.TryGetValue(System.Object@)">
            <summary>
            Atempts to get the value. If a value is assigned it returns true otherwise
            it returns false.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.SetValue(System.Object)">
            <summary>
            Sets the current value in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.DeleteValue">
            <summary>
            Removes the current value from the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariable.HasValue">
            <summary>
            True if the scope has a value, false if it does not.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeVariableIgnoreCase">
            <summary>
            Boxes the value for storage in a scope. Languages or consumers of the scope
            can save this value and use it to get/set the current value in the scope for
            commonly accessed values.
            
            ScopeVariablesIgnoreCase are case insensitive and may access different casings
            depending on how other gets/sets occur in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.TryGetValue(System.Object@)">
            <summary>
            Atempts to get the value. If a value is assigned it returns true otherwise
            it returns false.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.SetValue(System.Object)">
            <summary>
            Sets the current value in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.DeleteValue">
            <summary>
            Removes the current value from the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariableIgnoreCase.HasValue">
            <summary>
            True if the scope has a value, false if it does not.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ScriptCode">
            <summary>
            ScriptCode is an instance of compiled code that is bound to a specific LanguageContext
            but not a specific ScriptScope. The code can be re-executed multiple times in different
            scopes. Hosting API counterpart for this class is <c>CompiledCode</c>.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.Globals">
            <summary>
            A collection of environment variables.
            </summary>
        </member>
        <member name="E:Microsoft.Scripting.Runtime.ScriptDomainManager.AssemblyLoaded">
            <summary>
            Event for when a host calls LoadAssembly.  After hooking this
            event languages will need to call GetLoadedAssemblyList to
            get any assemblies which were loaded before the language was
            loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.SetOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Only host should redirect I/O.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.StreamContentProvider">
            <summary>
            Provides a factory to create streams over one source of binary content.  
            
            StreamContentProvider's are used when opening a file of an unknown encoding.  The
            StreamContentProvider will be wrapped in a TextContentProvider provided by the language
            which can support a language specific way of interpreting the binary data into text. 
            
            For example some languages allow a marker at the beginning of the file which specifies
            the encoding of the rest of the file.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.StreamContentProvider.GetStream">
            <summary>
            Creates a new Stream which is backed by the content the StreamContentProvider was created for.
            
            For example if the StreamContentProvider was backing a file then GetStream re-opens the file and returns
            the new stream.
            
            This method may be called multiple times.  For example once to compile the code and again to get
            the source code to display error messages.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.ReadToken">
            <summary>
            Move the tokenizer past the next token and return its category.
            </summary>
            <returns>The token information associated with the token just scanned.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.SkipToken">
            <summary>
            Move the tokenizer past the next token.
            </summary>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.ReadTokens(System.Int32)">
            <summary>
            Get all tokens over a block of the stream.
            </summary>
            <remarks>
            <para>
            The scanner should return full tokens. If startLocation + length lands in the middle of a token, the full token
            should be returned.
            </para>
            </remarks>
            <param name="characterCount">Tokens are read until at least given amount of characters is read or the stream ends.</param>
            <returns>A enumeration of tokens.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.SkipTokens(System.Int32)">
            <summary>
            Scan from startLocation to at least startLocation + length.
            </summary>
            <param name="countOfChars">The mininum number of characters to process while getting tokens.</param>
            <remarks>
            This method is used to determine state at arbitrary startLocation.
            </remarks>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.CurrentState">
            <summary>
            The current internal state of the scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.CurrentPosition">
            <summary>
            The current startLocation of the scanner.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.TokenTriggers">
            <summary>
            See also <c>Microsoft.VisualStudio.Package.TokenTriggers</c>.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Complete">
            <summary>
            Source code is a syntactically correct.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Empty">
            <summary>
            Source code represents an empty statement/expression.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Invalid">
            <summary>
            Source code is already invalid and no suffix can make it syntactically correct.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.IncompleteToken">
            <summary>
            Last token is incomplete. Source code can still be completed correctly.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.IncompleteStatement">
            <summary>
            Last statement is incomplete. Source code can still be completed correctly.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceCodeKind">
            <summary>
            Defines a kind of the source code. The parser sets its initial state accordingly.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.Expression">
            <summary>
            The code is an expression.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.Statements">
            <summary>
            The code is a sequence of statements.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.SingleStatement">
            <summary>
            The code is a single statement.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.File">
            <summary>
            The code is a content of a file.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.InteractiveCode">
            <summary>
            The code is an interactive command.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.AutoDetect">
            <summary>
            The language parser auto-detects the kind. A syntax error is reported if it is not able to do so.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceCodeReader">
            <summary>
            Source code reader.
            </summary>    
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.SeekLine(System.Int32)">
            <summary>
            Seeks the first character of a specified line in the text stream.
            </summary>
            <param name="line">Line number. The current position is assumed to be line #1.</param>
            <returns>
            Returns <c>true</c> if the line is found, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Microsoft.Scripting.SourceCodeReader.Encoding">
            <summary>
            Encoding that is used by the reader to convert binary data read from an underlying binary stream.
            <c>Null</c> if the reader is reading from a textual source (not performing any byte to character transcoding).
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.FileStreamContentProvider">
            <summary>
            Provides a StreamContentProvider for a stream of content backed by a file on disk.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceLocation">
            <summary>
            Represents a location in source code.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new source location.
            </summary>
            <param name="index">The index in the source stream the location represents (0-based).</param>
            <param name="line">The line in the source stream the location represents (1-based).</param>
            <param name="column">The column in the source stream the location represents (1-based).</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Equality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if they are equal.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the locations are the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Inequality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if they are not equal.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the locations are not the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is before the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is before the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is after the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is after the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is before or the same as the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is before or the same as the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values to see if one is after or the same as the other.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>True if the first location is after or the same as the other location, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.Compare(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Compares two specified location values.
            </summary>
            <param name="left">One location to compare.</param>
            <param name="right">The other location to compare.</param>
            <returns>0 if the locations are equal, -1 if the left one is less than the right one, 1 otherwise.</returns>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.None">
            <summary>
            A location that is valid but represents no location at all.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.Invalid">
            <summary>
            An invalid location.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.MinValue">
            <summary>
            A minimal valid location.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Index">
            <summary>
            The index in the source stream the location represents (0-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Line">
            <summary>
            The line in the source stream the location represents (1-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Column">
            <summary>
            The column in the source stream the location represents (1-based).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.IsValid">
            <summary>
            Whether the location is a valid location.
            </summary>
            <returns>True if the location is valid, False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Scripting.SourceSpan">
            <summary>
            Stores the location of a span of text in a source file.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.#ctor(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>
            Constructs a new span with a specific start and end location.
            </summary>
            <param name="start">The beginning of the span.</param>
            <param name="end">The end of the span.</param>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.None">
            <summary>
            A valid span that represents no location.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.Invalid">
            <summary>
            An invalid span.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Equality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>
            Compares two specified Span values to see if they are equal.
            </summary>
            <param name="left">One span to compare.</param>
            <param name="right">The other span to compare.</param>
            <returns>True if the spans are the same, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Inequality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>
            Compares two specified Span values to see if they are not equal.
            </summary>
            <param name="left">One span to compare.</param>
            <param name="right">The other span to compare.</param>
            <returns>True if the spans are not the same, False otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Start">
            <summary>
            The start location of the span.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.End">
            <summary>
            The end location of the span. Location of the first character behind the span.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Length">
            <summary>
            Length of the span (number of characters inside the span).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.IsValid">
            <summary>
            Whether the locations in the span are valid.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.GetCodeLines(System.Int32,System.Int32)">
            <summary>
            Reads specified range of lines (or less) from the source unit. 
            Line numbers starts with 1.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Compile(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>
            Errors are reported to the specified sink. 
            Returns <c>null</c> if the parser cannot compile the code due to error(s).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.Runtime.Scope)">
            <summary>
            Executes against a specified scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.Runtime.Scope,Microsoft.Scripting.ErrorSink)">
            <summary>
            Executes against a specified scope and reports errors to the given error sink.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute">
            <summary>
            Executes in a new scope created by the language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.ErrorSink)">
            <summary>
            Executes in a new scope created by the language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>
            Executes in a new scope created by the language.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.Path">
            <summary>
            Identification of the source unit. Assigned by the host. 
            The format and semantics is host dependent (could be a path on file system or URL).
            Empty string for anonymous source units.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.LanguageContext">
            <summary>
            LanguageContext of the language of the unit.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.RawSpan">
            <summary>
            Unmapped span.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.EndOfStream">
            <summary>
            A token marking an end of stream.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.WhiteSpace">
            <summary>
            A space, tab, or newline.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Comment">
            <summary>
            A block comment.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.LineComment">
            <summary>
            A single line comment.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.DocComment">
            <summary>
            A documentation comment.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.NumericLiteral">
            <summary>
            A numeric literal.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.CharacterLiteral">
            <summary>
            A character literal.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.StringLiteral">
            <summary>
            A string literal.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.RegularExpressionLiteral">
            <summary>
            A regular expression literal.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Keyword">
            <summary>
            A keyword.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Directive">
            <summary>
            A directive (e.g. #line).
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Operator">
            <summary>
            A punctuation character that has a specific meaning in a language.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Delimiter">
            <summary>
            A token that operates as a separator between two language elements.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Identifier">
            <summary>
            An identifier (variable, $variable, @variable, @@variable, $variable$, function!, function?, [variable], i'variable', ...)
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Grouping">
            <summary>
            Braces, parenthesis, brackets.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Error">
            <summary>
            Errors.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts a generic ICollection of T into an array of T.  
            
            If the collection is already an  array of T the original collection is returned.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.CheckedDictionaryEnumerator">
            <summary>
            Not all .NET enumerators throw exceptions if accessed in an invalid state. This type
            can be used to throw exceptions from enumerators implemented in IronPython.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionExtensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the provided enumerable into a ReadOnlyCollection{T}
            
            Copies all of the data into a new array, so the data can't be
            changed after creation. The exception is if the enumerable is
            already a ReadOnlyCollection{T}, in which case we just return it.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ConsoleInputStream">
            <summary>
            Console input stream (Console.OpenStandardInput) has a bug that manifests itself if reading small amounts of data.
            This class wraps the standard input stream with a buffer that ensures that enough data are read from the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Requires the range [offset, offset + count] to be a subset of [0, array.Count].
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or count are out of range.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayRange(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Requires the range [offset, offset + count] to be a subset of [0, array.Count].
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or count are out of range.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotNullItems``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Requires the array and all its items to be non-null.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Requires the enumerable collection and all its items to be non-null.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresListRange(System.Collections.IList,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Requires the range [offset, offset + count] to be a subset of [0, array.Count].
            </summary>
            <exception cref="T:System.ArgumentNullException">Array is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset or count are out of range.</exception>
        </member>
        <member name="T:Microsoft.Scripting.Utils.DictionaryUnionEnumerator">
            <summary>
            Presents a flat enumerable view of multiple dictionaries
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Strings">
            <summary>
               Strongly-typed and parameterized string factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation_ContainsGenericParameters(System.Object,System.Object)">
            <summary>
            A string like  "Cannot access member {1} declared on type {0} because the type contains generic parameters."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MissingType(System.Object)">
            <summary>
            A string like  "Type '{0}' is missing or cannot be loaded."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAccessFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be read through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAssignmentFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be assigned to through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            A string like  "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCast(System.Object,System.Object)">
            <summary>
            A string like  "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnknownMemberType(System.Object)">
            <summary>
            A string like  "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NonGenericWithGenericGroup(System.Object)">
            <summary>
            A string like  "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation(System.Object)">
            <summary>
            A string like  "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            A string like  "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnhandledConvert(System.Object)">
            <summary>
            A string like  "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoCallableMethods(System.Object,System.Object)">
            <summary>
            A string like  "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExtensionMustBePublic(System.Object)">
            <summary>
            A string like  "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            A string like  "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.FieldReadonly(System.Object)">
            <summary>
            A string like  "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.PropertyReadonly(System.Object)">
            <summary>
            A string like  "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExpectedBoundEvent(System.Object)">
            <summary>
            A string like  "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedType(System.Object,System.Object)">
            <summary>
            A string like  "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MemberWriteOnly(System.Object)">
            <summary>
            A string like  "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidStreamType(System.Object)">
            <summary>
            A string like  "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddCasing(System.Object)">
            <summary>
            A string like  "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddIdentifier(System.Object)">
            <summary>
            A string like  "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCtorImplementation(System.Object,System.Object)">
            <summary>
            A string like  "Type '{0}' doesn't provide a suitable public constructor or its implementation is faulty: {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            A string like  "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoImplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoExplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NameNotDefined(System.Object)">
            <summary>
            A string like  "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.IllegalNew_GenericParams(System.Object)">
            <summary>
            A string like  "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodPreconditionViolated">
            <summary>
            A string like  "Method precondition violated"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidArgumentValue">
            <summary>
            A string like  "Invalid argument value"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyStringRequired">
            <summary>
            A string like  "Non-empty string required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyCollectionRequired">
            <summary>
            A string like  "Non-empty collection required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustBeExceptionInstance">
            <summary>
            A string like  "must by an Exception instance"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfTestMustBeBool">
            <summary>
            A string like  "Type of test must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfExpressionMustBeBool">
            <summary>
            A string like  "Type of the expression must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EmptyStringIsInvalidPath">
            <summary>
            A string like  "Empty string is not a valid path."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidDelegate">
            <summary>
            A string like  "Invalid delegate type (Invoke method not found)."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ExpectedStaticProperty">
            <summary>
            A string like  "expected only static property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.PropertyDoesNotExist">
            <summary>
            A string like  "Property doesn't exist on the provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FieldDoesNotExist">
            <summary>
            A string like  "Field doesn't exist on provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveConstructorForTheSignature">
            <summary>
            A string like  "Type doesn't have constructor with a given signature"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForName">
            <summary>
            A string like  "Type doesn't have a method with a given name."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForNameSignature">
            <summary>
            A string like  "Type doesn't have a method with a given name and signature."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CountCannotBeNegative">
            <summary>
            A string like  "Count must be non-negative."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ArrayTypeMustBeArray">
            <summary>
            A string like  "arrayType must be an array type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustHaveCodeOrTarget">
            <summary>
            A string like  "Either code or target must be specified."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FirstArgumentMustBeCallSite">
            <summary>
            A string like  "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoInstanceForCall">
            <summary>
            A string like  "no instance for call."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTest">
            <summary>
            A string like  "Missing Test."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTarget">
            <summary>
            A string like  "Missing Target."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FinallyAlreadyDefined">
            <summary>
            A string like  "Finally already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotHaveFaultAndFinally">
            <summary>
            A string like  "Can not have fault and finally."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FaultAlreadyDefined">
            <summary>
            A string like  "Fault already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GlobalsMustBeUnique">
            <summary>
            A string like  "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GenNonSerializableBinder">
            <summary>
            A string like  "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidPath">
            <summary>
            A string like  "Specified path is invalid."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.DictionaryNotHashable">
            <summary>
            A string like  "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.LanguageRegistered">
            <summary>
            A string like  "language already registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodOrOperatorNotImplemented">
            <summary>
            A string like  "The method or operation is not implemented."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoException">
            <summary>
            A string like  "No exception."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.AlreadyInitialized">
            <summary>
            A string like  "Already initialized."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustReturnScopeExtension">
            <summary>
            A string like  "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidParamNumForService">
            <summary>
            A string like  "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotChangeNonCachingValue">
            <summary>
            A string like  "Cannot change non-caching value."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoCodeToCompile">
            <summary>
            A string like  "No code to compile."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.QueueEmpty">
            <summary>
            A string like  "Queue empty."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationNotStarted">
            <summary>
            A string like  "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationFinished">
            <summary>
            A string like  "Enumeration already finished."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidOutputDir">
            <summary>
            A string like  "Invalid output directory."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidAsmNameOrExtension">
            <summary>
            A string like  "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoDefaultValue">
            <summary>
            A string like  "No default value for a given type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnknownLanguageProviderType">
            <summary>
            A string like  "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantReadProperty">
            <summary>
            A string like  "can't read from property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantWriteProperty">
            <summary>
            A string like  "can't write to property"
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustHaveCodeOrTarget">
            <summary>
            ArgumentException with message like "Either code or target must be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            InvalidOperationException with message like "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidCast(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownMemberType(System.Object)">
            <summary>
            InvalidOperationException with message like "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FirstArgumentMustBeCallSite">
            <summary>
            InvalidOperationException with message like "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoInstanceForCall">
            <summary>
            InvalidOperationException with message like "no instance for call."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTest">
            <summary>
            InvalidOperationException with message like "Missing Test."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTarget">
            <summary>
            InvalidOperationException with message like "Missing Target."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NonGenericWithGenericGroup(System.Object)">
            <summary>
            TypeLoadException with message like "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOperation(System.Object)">
            <summary>
            ArgumentException with message like "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FinallyAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Finally already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotHaveFaultAndFinally">
            <summary>
            InvalidOperationException with message like "Can not have fault and finally."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FaultAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Fault already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnhandledConvert(System.Object)">
            <summary>
            ArgumentException with message like "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCallableMethods(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GlobalsMustBeUnique">
            <summary>
            ArgumentException with message like "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GenNonSerializableBinder">
            <summary>
            ArgumentException with message like "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidPath">
            <summary>
            ArgumentException with message like "Specified path is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DictionaryNotHashable">
            <summary>
            ArgumentTypeException with message like "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.LanguageRegistered">
            <summary>
            InvalidOperationException with message like "language already registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MethodOrOperatorNotImplemented">
            <summary>
            NotImplementedException with message like "The method or operation is not implemented."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoException">
            <summary>
            InvalidOperationException with message like "No exception."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExtensionMustBePublic(System.Object)">
            <summary>
            ArgumentException with message like "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.AlreadyInitialized">
            <summary>
            InvalidOperationException with message like "Already initialized."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustReturnScopeExtension">
            <summary>
            InvalidImplementationException with message like "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidParamNumForService">
            <summary>
            ArgumentException with message like "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotChangeNonCachingValue">
            <summary>
            ArgumentException with message like "Cannot change non-caching value."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FieldReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.PropertyReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExpectedBoundEvent(System.Object)">
            <summary>
            ArgumentTypeException with message like "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedType(System.Object,System.Object)">
            <summary>
            ArgumentTypeException with message like "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MemberWriteOnly(System.Object)">
            <summary>
            MemberAccessException with message like "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCodeToCompile">
            <summary>
            InvalidOperationException with message like "No code to compile."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidStreamType(System.Object)">
            <summary>
            ArgumentException with message like "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.QueueEmpty">
            <summary>
            InvalidOperationException with message like "Queue empty."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationNotStarted">
            <summary>
            InvalidOperationException with message like "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationFinished">
            <summary>
            InvalidOperationException with message like "Enumeration already finished."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddCasing(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddIdentifier(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOutputDir">
            <summary>
            ArgumentException with message like "Invalid output directory."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidAsmNameOrExtension">
            <summary>
            ArgumentException with message like "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoImplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoExplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NameNotDefined(System.Object)">
            <summary>
            MissingMemberException with message like "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoDefaultValue">
            <summary>
            ArgumentException with message like "No default value for a given type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownLanguageProviderType">
            <summary>
            ArgumentException with message like "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantReadProperty">
            <summary>
            InvalidOperationException with message like "can't read from property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantWriteProperty">
            <summary>
            InvalidOperationException with message like "can't write to property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.IllegalNew_GenericParams(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            System.Security.VerificationException with message like "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.DelegateUtils.GetObjectCallSiteDelegateType(System.Int32)">
            <summary>
            Gets a Func of CallSite, object * paramCnt, object delegate type
            that's suitable for use in a non-strongly typed call site.
            </summary>
        </member>
    </members>
</doc>
